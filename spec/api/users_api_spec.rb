=begin
#Pipedrive API v1

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'spec_helper'
require 'json'

# Unit tests for Pipedrive::UsersApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'UsersApi' do
  before do
    # run before each test
    @instance = Pipedrive::UsersApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of UsersApi' do
    it 'should create an instance of UsersApi' do
      expect(@instance).to be_instance_of(Pipedrive::UsersApi)
    end
  end

  # unit tests for users_find_get
  # Find users by name
  # Finds users by their name.
  # @param term Search term to look for
  # @param [Hash] opts the optional parameters
  # @option opts [String] :search_by_email When enabled, term will only be matched against email addresses of users. Default: false
  # @return [nil]
  describe 'users_find_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_get
  # Get all users
  # Returns data about all users within the company
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'users_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_activities_get
  # List and filter activities assigned to a specific user
  # Lists activities assigned to a specific user, with optional due_date and type filtering.
  # @param id ID of the user
  # @param [Hash] opts the optional parameters
  # @option opts [String] :due_date Either a due date in YYYY-MM-DD format, or one of the following: all, overdue, today, tomorrow, this_week, next_week
  # @option opts [String] :type Filter activities based on ActivityType&#39;s key_string (examples: call, meeting)
  # @option opts [Float] :start Pagination start
  # @option opts [Float] :limit Items shown per page
  # @option opts [String] :done Whether to fetch done (1) or undone (0) activities. If omitted from request, both undone and done activities are fetched.
  # @return [nil]
  describe 'users_id_activities_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_blacklisted_emails_get
  # List blacklisted email addresses of a user
  # Lists blacklisted email addresses of a specific user. Blacklisted emails are such that will not get synced in to Pipedrive when using the built-in Mailbox.
  # @param id ID of the user
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'users_id_blacklisted_emails_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_blacklisted_emails_post
  # Add blacklisted email address for a user
  # Add blacklisted email address for a specific user.
  # @param id ID of the user
  # @param address Email address to blacklist (can contain \\* for wildcards, e.g. \\*@example.com, or john\\*@ex\\*.com)
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'users_id_blacklisted_emails_post test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_followers_get
  # List followers of a user
  # Lists followers of a specific user.
  # @param id ID of the user
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'users_id_followers_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_get
  # Get one user
  # Returns data about a specific user within the company
  # @param id ID of the user to fetch.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'users_id_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_permission_set_assignments_delete
  # Delete a permission set assignment
  # Delete a permission set assignment for a user
  # @param id ID of the user
  # @param permission_set_id ID of the permission set
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'users_id_permission_set_assignments_delete test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_permission_set_assignments_get
  # List permission set assignments
  # List permission set assignments for a user
  # @param id ID of the user
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :start Pagination start
  # @option opts [Float] :limit Items shown per page
  # @return [nil]
  describe 'users_id_permission_set_assignments_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_permission_set_assignments_post
  # Add permission set assignment
  # Add permission set assignment for a user
  # @param id ID of the user
  # @param permission_set_id ID of the permission set
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'users_id_permission_set_assignments_post test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_permissions_get
  # List user permissions
  # List aggregated permissions over all assigned permission sets for a user
  # @param id ID of the user
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'users_id_permissions_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_put
  # Update user details
  # Updates the properties of a user. Currently, only active_flag can be updated.
  # @param id ID of the user
  # @param active_flag Whether the user is active or not. 0 &#x3D; Not activated, 1 &#x3D; Activated
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'users_id_put test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_role_assignments_delete
  # Delete a role assignment
  # Delete a role assignment for a user
  # @param id ID of the user
  # @param role_id ID of the role
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'users_id_role_assignments_delete test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_role_assignments_get
  # List role assignments
  # List role assignments for a user
  # @param id ID of the user
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :start Pagination start
  # @option opts [Float] :limit Items shown per page
  # @return [nil]
  describe 'users_id_role_assignments_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_role_assignments_post
  # Add role assignment
  # Add role assignment for a user
  # @param id ID of the user
  # @param role_id ID of the role
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'users_id_role_assignments_post test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_role_settings_get
  # List user role settings
  # List settings of user&#39;s assigned role
  # @param id ID of the user
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'users_id_role_settings_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_post
  # Add a new user
  # Adds a new user to the company, returns the ID upon success.
  # @param name Name of the user
  # @param email Email of the user
  # @param active_flag Whether the user is active or not. 0 &#x3D; Not activated, 1 &#x3D; Activated
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'users_post test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
