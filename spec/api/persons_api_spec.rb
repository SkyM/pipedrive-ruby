=begin
#Pipedrive API v1

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'spec_helper'
require 'json'

# Unit tests for Pipedrive::PersonsApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'PersonsApi' do
  before do
    # run before each test
    @instance = Pipedrive::PersonsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of PersonsApi' do
    it 'should create an instance of PersonsApi' do
      expect(@instance).to be_instance_of(Pipedrive::PersonsApi)
    end
  end

  # unit tests for persons_delete
  # Delete multiple persons in bulk
  # Marks multiple persons as deleted.
  # @param ids Comma-separated IDs that will be deleted
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'persons_delete test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for persons_find_get
  # Find persons by name
  # Searches all persons by their name.
  # @param term Search term to look for
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :org_id ID of the organization person is associated with.
  # @option opts [Float] :start Pagination start
  # @option opts [Float] :limit Items shown per page
  # @option opts [String] :search_by_email When enabled, term will only be matched against email addresses of people. Default: false
  # @return [nil]
  describe 'persons_find_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for persons_get
  # Get all persons
  # Returns all persons
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :user_id If supplied, only persons owned by the given user will be returned.
  # @option opts [Float] :filter_id ID of the filter to use
  # @option opts [String] :first_char If supplied, only persons whose name starts with the specified letter will be returned (case insensitive).
  # @option opts [Float] :start Pagination start
  # @option opts [Float] :limit Items shown per page
  # @option opts [String] :sort Field names and sorting mode separated by comma (field_name_1 ASC, field_name_2 DESC). Only first-level field keys are supported (no nested keys).
  # @return [nil]
  describe 'persons_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for persons_id_activities_get
  # List activities associated with a person
  # Lists activities associated with a person.
  # @param id ID of the person
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :start Pagination start
  # @option opts [Float] :limit Items shown per page
  # @option opts [String] :done Whether to fetch done (1) or undone (0) activities. If omitted from request, both undone and done activities are fetched.
  # @option opts [String] :exclude A comma-separated string of activity IDs to exclude from result
  # @return [nil]
  describe 'persons_id_activities_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for persons_id_deals_get
  # List deals associated with a person
  # Lists deals associated with a person.
  # @param id ID of a person
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :start Pagination start
  # @option opts [Float] :limit Items shown per page
  # @option opts [String] :status Only fetch deals with specific status. If omitted, all not deleted deals are fetched.
  # @option opts [String] :sort Field names and sorting mode separated by comma (field_name_1 ASC, field_name_2 DESC). Only first-level field keys are supported (no nested keys).
  # @return [nil]
  describe 'persons_id_deals_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for persons_id_delete
  # Delete a person
  # Marks a person as deleted.
  # @param id ID of the person
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'persons_id_delete test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for persons_id_files_get
  # List files attached to a person
  # Lists files associated with a person.
  # @param id ID of the person
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :start Pagination start
  # @option opts [Float] :limit Items shown per page
  # @option opts [String] :include_deleted_files When enabled, the list of files will also include deleted files. Please note that trying to download these files will not work.
  # @option opts [String] :sort Field names and sorting mode separated by comma (field_name_1 ASC, field_name_2 DESC). Only first-level field keys are supported (no nested keys). Supported fields: id, user_id, deal_id, person_id, org_id, product_id, add_time, update_time, file_name, file_type, file_size, comment.
  # @return [nil]
  describe 'persons_id_files_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for persons_id_flow_get
  # List updates about a person
  # Lists updates about a person.
  # @param id ID of the person
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :start Pagination start
  # @option opts [Float] :limit Items shown per page
  # @return [nil]
  describe 'persons_id_flow_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for persons_id_followers_follower_id_delete
  # Delete a follower from a person
  # Deletes a follower from a person.
  # @param id ID of the person
  # @param follower_id ID of the follower
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'persons_id_followers_follower_id_delete test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for persons_id_followers_get
  # List followers of a person
  # Lists the followers of a person.
  # @param id ID of the person
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'persons_id_followers_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for persons_id_followers_post
  # Add a follower to a person
  # Adds a follower to a person.
  # @param id ID of the person
  # @param user_id ID of the user
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'persons_id_followers_post test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for persons_id_get
  # Get details of a person
  # Returns details of a person. Note that this also returns some additional fields which are not present when asking for all persons. Also note that custom fields appear as long hashes in the resulting data. These hashes can be mapped against the &#39;key&#39; value of personFields.
  # @param id ID of the person
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'persons_id_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for persons_id_mail_messages_get
  # List mail messages associated with a person
  # Lists mail messages associated with a person.
  # @param id ID of the person
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :start Pagination start
  # @option opts [Float] :limit Items shown per page
  # @return [nil]
  describe 'persons_id_mail_messages_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for persons_id_merge_put
  # Merge two persons
  # Merges a person with another person.
  # @param id ID of the person that will be merged
  # @param merge_with_id ID of the person that the person will be merged with
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'persons_id_merge_put test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for persons_id_permitted_users_get
  # List permitted users
  # List users permitted to access a person
  # @param id ID of the person
  # @param [Hash] opts the optional parameters
  # @option opts [String] :access_level If set, filter results by allowed access level. 1 &#x3D; Read, 2 &#x3D; Write, 3 &#x3D; Read+Write
  # @return [nil]
  describe 'persons_id_permitted_users_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for persons_id_picture_delete
  # Delete person picture
  # Delete person picture
  # @param id ID of the person
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'persons_id_picture_delete test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for persons_id_picture_post
  # Add person picture
  # Add a picture to a person. If a picture is already set, the old picture will be replaced. Added image (or the cropping parameters supplied with the request) should have an equal width and height and should be at least 128 pixels. GIF, JPG and PNG are accepted. All added images will be resized to 128 and 512 pixel wide squares.
  # @param id ID of the person
  # @param file One image supplied in the multipart/form-data encoding.
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :crop_x X coordinate to where start cropping form (in pixels)
  # @option opts [Float] :crop_y Y coordinate to where start cropping form (in pixels)
  # @option opts [Float] :crop_width Width of cropping area (in pixels)
  # @option opts [Float] :crop_height Height of cropping area (in pixels)
  # @return [nil]
  describe 'persons_id_picture_post test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for persons_id_products_get
  # List products associated with a person
  # Lists products associated with a person.
  # @param id ID of the person
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :start Pagination start
  # @option opts [Float] :limit Items shown per page
  # @return [nil]
  describe 'persons_id_products_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for persons_id_put
  # Update a person
  # Updates the properties of a person.
  # @param id Person ID
  # @param [Hash] opts the optional parameters
  # @option opts [String] :name Person name
  # @option opts [Float] :owner_id ID of the user who will be marked as the owner of this person. When omitted, the authorized user ID will be used.
  # @option opts [Float] :org_id ID of the organization this person will belong to.
  # @option opts [Array<String>] :email Email addresses (one or more) associated with the person, presented in the same manner as received by GET request of a person.
  # @option opts [Array<String>] :phone Phone numbers (one or more) associated with the person, presented in the same manner as received by GET request of a person.
  # @option opts [String] :visible_to Visibility of the person. If omitted, visibility will not be changed.&lt;dl class&#x3D;\&quot;fields-list\&quot;&gt;&lt;dt&gt;1&lt;/dt&gt;&lt;dd&gt;Owner &amp;amp; followers (private)&lt;/dd&gt;&lt;dt&gt;3&lt;/dt&gt;&lt;dd&gt;Entire company (shared)&lt;/dd&gt;&lt;/dl&gt;
  # @return [nil]
  describe 'persons_id_put test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for persons_post
  # Add a person
  # Adds a new person. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys. To determine which custom fields exists, fetch the personFields and look for &#39;key&#39; values.
  # @param name Person name
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :owner_id ID of the user who will be marked as the owner of this person. When omitted, the authorized user ID will be used.
  # @option opts [Float] :org_id ID of the organization this person will belong to.
  # @option opts [Array<String>] :email Email addresses (one or more) associated with the person, presented in the same manner as received by GET request of a person.
  # @option opts [Array<String>] :phone Phone numbers (one or more) associated with the person, presented in the same manner as received by GET request of a person.
  # @option opts [String] :visible_to Visibility of the person. If omitted, visibility will be set to the default visibility setting of this item type for the authorized user.&lt;dl class&#x3D;\&quot;fields-list\&quot;&gt;&lt;dt&gt;1&lt;/dt&gt;&lt;dd&gt;Owner &amp;amp; followers (private)&lt;/dd&gt;&lt;dt&gt;3&lt;/dt&gt;&lt;dd&gt;Entire company (shared)&lt;/dd&gt;&lt;/dl&gt;
  # @option opts [String] :add_time Optional creation date &amp; time of the person in UTC. Requires admin user API token. Format: YYYY-MM-DD HH:MM:SS
  # @return [nil]
  describe 'persons_post test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
