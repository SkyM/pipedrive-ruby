=begin
#Pipedrive API v1

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'spec_helper'
require 'json'

# Unit tests for Pipedrive::NotesApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'NotesApi' do
  before do
    # run before each test
    @instance = Pipedrive::NotesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of NotesApi' do
    it 'should create an instance of NotesApi' do
      expect(@instance).to be_instance_of(Pipedrive::NotesApi)
    end
  end

  # unit tests for notes_get
  # Get all notes
  # Returns all notes
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :user_id ID of the user who&#39;s notes to fetch. If omitted, notes by all users will be returned.
  # @option opts [Float] :deal_id ID of the deal whih notes to fetch. If omitted, notes about all deals with be returned.
  # @option opts [Float] :person_id ID of the person whih notes to fetch. If omitted, notes about all persons with be returned.
  # @option opts [Float] :org_id ID of the organization whih notes to fetch. If omitted, notes about all organizations with be returned.
  # @option opts [Float] :start Pagination start
  # @option opts [Float] :limit Items shown per page
  # @option opts [String] :sort Field names and sorting mode separated by comma (field_name_1 ASC, field_name_2 DESC). Only first-level field keys are supported (no nested keys). Supported fields: id, user_id, deal_id, person_id, org_id, content, add_time, update_time.
  # @option opts [String] :start_date Date in format of YYYY-MM-DD from which notes to fetch from.
  # @option opts [String] :end_date Date in format of YYYY-MM-DD until which notes to fetch to.
  # @option opts [String] :pinned_to_deal_flag If set, then results are filtered by note to deal pinning state.
  # @option opts [String] :pinned_to_organization_flag If set, then results are filtered by note to organization pinning state.
  # @option opts [String] :pinned_to_person_flag If set, then results are filtered by note to person pinning state.
  # @return [nil]
  describe 'notes_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for notes_id_delete
  # Delete a note
  # Deletes a specific note.
  # @param id ID of the note
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'notes_id_delete test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for notes_id_get
  # Get one note
  # Returns details about a specific note.
  # @param id ID of the note
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'notes_id_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for notes_id_put
  # Update a note
  # Updates a note
  # @param id ID of the note
  # @param content Content of the note in HTML format. Subject to sanitization on the back-end.
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :deal_id ID of the deal the note will be attached to.
  # @option opts [Float] :person_id ID of the person this note will be attached to
  # @option opts [Float] :org_id ID of the organization this note will be attached to
  # @option opts [String] :pinned_to_deal_flag If set, then results are filtered by note to deal pinning state.
  # @option opts [String] :pinned_to_organization_flag If set, then results are filtered by note to organization pinning state.
  # @option opts [String] :pinned_to_person_flag If set, then results are filtered by note to person pinning state.
  # @return [nil]
  describe 'notes_id_put test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for notes_post
  # Add a note
  # Adds a new note
  # @param content Content of the note in HTML format. Subject to sanitization on the back-end.
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :deal_id ID of the deal the note will be attached to.
  # @option opts [Float] :person_id ID of the person this note will be attached to
  # @option opts [Float] :org_id ID of the organization this note will be attached to
  # @option opts [String] :pinned_to_deal_flag If set, then results are filtered by note to deal pinning state (deal_id is also required).
  # @option opts [String] :pinned_to_organization_flag If set, then results are filtered by note to organization pinning state (org_id is also required).
  # @option opts [String] :pinned_to_person_flag If set, then results are filtered by note to person pinning state (person_id is also required).
  # @return [nil]
  describe 'notes_post test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
