=begin
#Pipedrive API v1

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'spec_helper'
require 'json'

# Unit tests for Pipedrive::FiltersApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'FiltersApi' do
  before do
    # run before each test
    @instance = Pipedrive::FiltersApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of FiltersApi' do
    it 'should create an instance of FiltersApi' do
      expect(@instance).to be_instance_of(Pipedrive::FiltersApi)
    end
  end

  # unit tests for filters_delete
  # Delete multiple filters in bulk
  # Marks multiple filters as deleted.
  # @param ids Comma-separated filter IDs to delete
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'filters_delete test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for filters_get
  # Get all filters
  # Returns data about all filters
  # @param [Hash] opts the optional parameters
  # @option opts [String] :type Type of filters to fetch.
  # @return [nil]
  describe 'filters_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for filters_id_delete
  # Delete a filter
  # Marks a filter as deleted.
  # @param id ID of the filter to delete.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'filters_id_delete test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for filters_id_get
  # Get one filter
  # Returns data about a specific filter. Note that this also returns the condition lines of the filter.
  # @param id ID of the filter to fetch.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'filters_id_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for filters_id_put
  # Update filter
  # Updates existing filter.
  # @param id ID of the filter to update.
  # @param conditions Filter conditions as a JSON object. It requires a minimum structure as follows: {\&quot;glue\&quot;:\&quot;and\&quot;,\&quot;conditions\&quot;:[{\&quot;glue\&quot;:\&quot;and\&quot;,\&quot;conditions\&quot;: [CONDITION_OBJECTS]},{\&quot;glue\&quot;:\&quot;or\&quot;,\&quot;conditions\&quot;:[CONDITION_OBJECTS]}]}. Replace CONDITION_OBJECTS with JSON objects of the following structure: {\&quot;object\&quot;:\&quot;\&quot;,\&quot;field_id\&quot;:\&quot;\&quot;, \&quot;operator\&quot;:\&quot;\&quot;,\&quot;value\&quot;:\&quot;\&quot;, \&quot;extra_value\&quot;:\&quot;\&quot;} or leave the array empty. Depending on the object type you should use another API endpoint to get field_id. There are five types of objects you can choose from: \&quot;person\&quot;, \&quot;deal\&quot;, \&quot;organization\&quot;, \&quot;product\&quot;, \&quot;activity\&quot; and you can use these types of operators depending on what type of a field you have: \&quot;IS NOT NULL\&quot;, \&quot;IS NULL\&quot;, \&quot;&lt;&#x3D;\&quot;, \&quot;&gt;&#x3D;\&quot;, \&quot;&lt;\&quot;, \&quot;&gt;\&quot;, \&quot;!&#x3D;\&quot;, \&quot;&#x3D;\&quot;, \&quot;LIKE &#39;%$%&#39;\&quot;, \&quot;NOT LIKE &#39;%$%&#39;\&quot;, \&quot;LIKE &#39;$%&#39;\&quot;, \&quot;NOT LIKE &#39;$%&#39;\&quot;, \&quot;LIKE &#39;%$&#39;\&quot;, \&quot;NOT LIKE &#39;%$&#39;\&quot;. To get a better understanding of how filters work try creating them directly from the Pipedrive application.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :name Filter name
  # @return [nil]
  describe 'filters_id_put test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for filters_post
  # Add a new filter
  # Adds a new filter, returns the ID upon success. Note that in the conditions json object only one first-level condition group is supported, and it must be glued with &#39;AND&#39;, and only two second level condition groups are supported of which one must be glued with &#39;AND&#39; and the second with &#39;OR&#39;. Other combinations do not work (yet) but the syntax supports introducing them in future.
  # @param name Filter name
  # @param conditions Filter conditions as a JSON object. It requires a minimum structure as follows: {\&quot;glue\&quot;:\&quot;and\&quot;,\&quot;conditions\&quot;:[{\&quot;glue\&quot;:\&quot;and\&quot;,\&quot;conditions\&quot;: [CONDITION_OBJECTS]},{\&quot;glue\&quot;:\&quot;or\&quot;,\&quot;conditions\&quot;:[CONDITION_OBJECTS]}]}. Replace CONDITION_OBJECTS with JSON objects of the following structure: {\&quot;object\&quot;:\&quot;\&quot;,\&quot;field_id\&quot;:\&quot;\&quot;, \&quot;operator\&quot;:\&quot;\&quot;,\&quot;value\&quot;:\&quot;\&quot;, \&quot;extra_value\&quot;:\&quot;\&quot;} or leave the array empty. Depending on the object type you should use another API endpoint to get field_id. There are five types of objects you can choose from: \&quot;person\&quot;, \&quot;deal\&quot;, \&quot;organization\&quot;, \&quot;product\&quot;, \&quot;activity\&quot; and you can use these types of operators depending on what type of a field you have: \&quot;IS NOT NULL\&quot;, \&quot;IS NULL\&quot;, \&quot;&lt;&#x3D;\&quot;, \&quot;&gt;&#x3D;\&quot;, \&quot;&lt;\&quot;, \&quot;&gt;\&quot;, \&quot;!&#x3D;\&quot;, \&quot;&#x3D;\&quot;, \&quot;LIKE &#39;%$%&#39;\&quot;, \&quot;NOT LIKE &#39;%$%&#39;\&quot;, \&quot;LIKE &#39;$%&#39;\&quot;, \&quot;NOT LIKE &#39;$%&#39;\&quot;, \&quot;LIKE &#39;%$&#39;\&quot;, \&quot;NOT LIKE &#39;%$&#39;\&quot;. To get a better understanding of how filters work try creating them directly from the Pipedrive application.
  # @param type Type of filter to create.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'filters_post test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
