=begin
#Pipedrive API v1

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'spec_helper'
require 'json'

# Unit tests for Pipedrive::ProductsApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'ProductsApi' do
  before do
    # run before each test
    @instance = Pipedrive::ProductsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ProductsApi' do
    it 'should create an instance of ProductsApi' do
      expect(@instance).to be_instance_of(Pipedrive::ProductsApi)
    end
  end

  # unit tests for products_find_get
  # Find products by name
  # Returns data about the products that were found. If currency was set in request, prices in that currency are served back.
  # @param term Search term to look for, minimum 3 characters.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :currency Currency code in which prices should be returned in. If omitted, prices in user&#39;s default currency will be returned.
  # @option opts [Float] :start Pagination start
  # @option opts [Float] :limit Items shown per page
  # @return [nil]
  describe 'products_find_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for products_get
  # Get all products
  # Returns data about all products
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :user_id If supplied, only products owned by the given user will be returned.
  # @option opts [Float] :filter_id ID of the filter to use
  # @option opts [String] :first_char If supplied, only products whose name starts with the specified letter will be returned (case insensitive).
  # @option opts [Float] :start Pagination start
  # @option opts [Float] :limit Items shown per page
  # @return [nil]
  describe 'products_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for products_id_deals_get
  # Get deals where a product is attached to
  # Returns data about a deals that have a product attached to.
  # @param id ID of the product
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :start Pagination start
  # @option opts [Float] :limit Items shown per page
  # @option opts [String] :status Only fetch deals with specific status. If omitted, all not deleted deals are fetched.
  # @return [nil]
  describe 'products_id_deals_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for products_id_delete
  # Delete a product
  # Marks a product as deleted.
  # @param id ID of the product to delete.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'products_id_delete test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for products_id_files_get
  # List files attached to a product
  # Lists files associated with a product.
  # @param id ID of the product
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :start Pagination start
  # @option opts [Float] :limit Items shown per page
  # @option opts [String] :include_deleted_files When enabled, the list of files will also include deleted files. Please note that trying to download these files will not work.
  # @option opts [String] :sort Field names and sorting mode separated by comma (field_name_1 ASC, field_name_2 DESC). Only first-level field keys are supported (no nested keys). Supported fields: id, user_id, deal_id, person_id, org_id, product_id, add_time, update_time, file_name, file_type, file_size, comment.
  # @return [nil]
  describe 'products_id_files_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for products_id_followers_follower_id_delete
  # Delete a follower from a product
  # Deletes a follower from a product.
  # @param id ID of the product
  # @param follower_id ID of the follower
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'products_id_followers_follower_id_delete test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for products_id_followers_get
  # List followers of a product
  # Lists the followers of a product.
  # @param id ID of the product
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'products_id_followers_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for products_id_followers_post
  # Add a follower to a product
  # Adds a follower to a product.
  # @param id ID of the product
  # @param user_id ID of the user
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'products_id_followers_post test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for products_id_get
  # Get one product
  # Returns data about a specific products
  # @param id ID of the product
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'products_id_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for products_id_permitted_users_get
  # List permitted users
  # List users permitted to access a product
  # @param id ID of the product
  # @param [Hash] opts the optional parameters
  # @option opts [String] :access_level If set, filter results by allowed access level. 1 &#x3D; Read, 2 &#x3D; Write, 3 &#x3D; Read+Write
  # @return [nil]
  describe 'products_id_permitted_users_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for products_id_put
  # Update a product
  # Updates product data.
  # @param id ID of the product
  # @param [Hash] opts the optional parameters
  # @option opts [String] :name Name of the product.
  # @option opts [String] :code Product code.
  # @option opts [String] :unit Unit in which this product is sold
  # @option opts [Float] :tax Tax percentage
  # @option opts [String] :active_flag Whether this product will be made active or not.
  # @option opts [String] :visible_to Visibility of the product. If omitted, visibility will be set to the default visibility setting of this item type for the authorized user.&lt;dl class&#x3D;\&quot;fields-list\&quot;&gt;&lt;dt&gt;1&lt;/dt&gt;&lt;dd&gt;Owner &amp;amp; followers (private)&lt;/dd&gt;&lt;dt&gt;3&lt;/dt&gt;&lt;dd&gt;Entire company (shared)&lt;/dd&gt;&lt;/dl&gt;
  # @option opts [Float] :owner_id ID of the user who will be marked as the owner of this product. When omitted, the authorized user ID will be used.
  # @option opts [Array<String>] :prices Array of objects, each containing: currency (string), price (number), cost (number, optional), overhead_cost (number, optional). Note that there can only be one price per product per currency. When &#39;prices&#39; is omitted altogether, product pricing will not be changed.
  # @return [nil]
  describe 'products_id_put test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for products_post
  # Add a product
  # Adds a new product to the products inventory.
  # @param name Name of the product.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :code Product code.
  # @option opts [String] :unit Unit in which this product is sold
  # @option opts [Float] :tax Tax percentage
  # @option opts [String] :active_flag Whether this product will be made active or not.
  # @option opts [String] :visible_to Visibility of the product. If omitted, visibility will be set to the default visibility setting of this item type for the authorized user.&lt;dl class&#x3D;\&quot;fields-list\&quot;&gt;&lt;dt&gt;1&lt;/dt&gt;&lt;dd&gt;Owner &amp;amp; followers (private)&lt;/dd&gt;&lt;dt&gt;3&lt;/dt&gt;&lt;dd&gt;Entire company (shared)&lt;/dd&gt;&lt;/dl&gt;
  # @option opts [Float] :owner_id ID of the user who will be marked as the owner of this product. When omitted, the authorized user ID will be used.
  # @option opts [] :prices Array of objects, each containing: currency (string), price (number), cost (number, optional), overhead_cost (number, optional). Note that there can only be one price per product per currency. When &#39;prices&#39; is omitted altogether, no prices will be set up for the product.
  # @return [nil]
  describe 'products_post test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
