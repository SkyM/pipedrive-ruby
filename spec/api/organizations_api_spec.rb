=begin
#Pipedrive API v1

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'spec_helper'
require 'json'

# Unit tests for Pipedrive::OrganizationsApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'OrganizationsApi' do
  before do
    # run before each test
    @instance = Pipedrive::OrganizationsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of OrganizationsApi' do
    it 'should create an instance of OrganizationsApi' do
      expect(@instance).to be_instance_of(Pipedrive::OrganizationsApi)
    end
  end

  # unit tests for organizations_delete
  # Delete multiple organizations in bulk
  # Marks multiple organizations as deleted.
  # @param ids Comma-separated IDs that will be deleted
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'organizations_delete test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for organizations_find_get
  # Find organizations by name
  # Searches all organizations by their name.
  # @param term Search term to look for
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :start Pagination start
  # @option opts [Float] :limit Items shown per page
  # @return [nil]
  describe 'organizations_find_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for organizations_get
  # Get all organizations
  # Returns all organizations
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :user_id If supplied, only organizations owned by the given user will be returned.
  # @option opts [Float] :filter_id ID of the filter to use
  # @option opts [String] :first_char If supplied, only organizations whose name starts with the specified letter will be returned (case insensitive).
  # @option opts [Float] :start Pagination start
  # @option opts [Float] :limit Items shown per page
  # @option opts [String] :sort Field names and sorting mode separated by comma (field_name_1 ASC, field_name_2 DESC). Only first-level field keys are supported (no nested keys).
  # @return [nil]
  describe 'organizations_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for organizations_id_activities_get
  # List activities associated with an organization
  # Lists activities associated with an organization.
  # @param id ID of the organization
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :start Pagination start
  # @option opts [Float] :limit Items shown per page
  # @option opts [String] :done Whether to fetch done (1) or undone (0) activities. If omitted from request, both undone and done activities are fetched.
  # @option opts [String] :exclude A comma-separated string of activity IDs to exclude from result
  # @return [nil]
  describe 'organizations_id_activities_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for organizations_id_deals_get
  # List deals associated with an organization
  # Lists deals associated with an organization.
  # @param id ID of an organization
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :start Pagination start
  # @option opts [Float] :limit Items shown per page
  # @option opts [String] :status Only fetch deals with specific status. If omitted, all not deleted deals are fetched.
  # @option opts [String] :sort Field names and sorting mode separated by comma (field_name_1 ASC, field_name_2 DESC). Only first-level field keys are supported (no nested keys).
  # @option opts [String] :only_primary_association If set, only deals that are directly associated to the organization are fetched. If not set (default), all deals are fetched that are either directly or indirectly related to the organization. Indirect relations include relations through custom, organization-type fields and through persons of the given organization.
  # @return [nil]
  describe 'organizations_id_deals_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for organizations_id_delete
  # Delete an organization
  # Marks an organization as deleted.
  # @param id ID of the organization
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'organizations_id_delete test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for organizations_id_files_get
  # List files attached to an organization
  # Lists files associated with an organization.
  # @param id ID of the organization
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :start Pagination start
  # @option opts [Float] :limit Items shown per page
  # @option opts [String] :include_deleted_files When enabled, the list of files will also include deleted files. Please note that trying to download these files will not work.
  # @option opts [String] :sort Field names and sorting mode separated by comma (field_name_1 ASC, field_name_2 DESC). Only first-level field keys are supported (no nested keys). Supported fields: id, user_id, deal_id, person_id, org_id, product_id, add_time, update_time, file_name, file_type, file_size, comment.
  # @return [nil]
  describe 'organizations_id_files_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for organizations_id_flow_get
  # List updates about an organization
  # Lists updates about an organization.
  # @param id ID of the organization
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :start Pagination start
  # @option opts [Float] :limit Items shown per page
  # @return [nil]
  describe 'organizations_id_flow_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for organizations_id_followers_follower_id_delete
  # Delete a follower from an organization
  # Deletes a follower from an organization.
  # @param id ID of the organization
  # @param follower_id ID of the follower
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'organizations_id_followers_follower_id_delete test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for organizations_id_followers_get
  # List followers of an organization
  # Lists the followers of an organization.
  # @param id ID of the organization
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'organizations_id_followers_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for organizations_id_followers_post
  # Add a follower to an organization
  # Adds a follower to an organization.
  # @param id ID of the organization
  # @param user_id ID of the user
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'organizations_id_followers_post test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for organizations_id_get
  # Get details of an organization
  # Returns details of an organization. Note that this also returns some additional fields which are not present when asking for all organizations. Also note that custom fields appear as long hashes in the resulting data. These hashes can be mapped against the &#39;key&#39; value of organizationFields.
  # @param id ID of the organization
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'organizations_id_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for organizations_id_mail_messages_get
  # List mail messages associated with an organization
  # Lists mail messages associated with an organization.
  # @param id ID of the organization
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :start Pagination start
  # @option opts [Float] :limit Items shown per page
  # @return [nil]
  describe 'organizations_id_mail_messages_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for organizations_id_merge_put
  # Merge two organizations
  # Merges an organization with another organization.
  # @param id ID of the organization that will be merged
  # @param merge_with_id ID of the organization that the organization will be merged with
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'organizations_id_merge_put test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for organizations_id_permitted_users_get
  # List permitted users
  # List users permitted to access an organization
  # @param id ID of the organization
  # @param [Hash] opts the optional parameters
  # @option opts [String] :access_level If set, filter results by allowed access level. 1 &#x3D; Read, 2 &#x3D; Write, 3 &#x3D; Read+Write
  # @return [nil]
  describe 'organizations_id_permitted_users_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for organizations_id_persons_get
  # List persons of an organization
  # Lists persons associated with an organization.
  # @param id ID of the organization
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :start Pagination start
  # @option opts [Float] :limit Items shown per page
  # @return [nil]
  describe 'organizations_id_persons_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for organizations_id_put
  # Update an organization
  # Updates the properties of an organization.
  # @param id Organization ID
  # @param [Hash] opts the optional parameters
  # @option opts [String] :name Organization name
  # @option opts [Float] :owner_id ID of the user who will be marked as the owner of this organization. When omitted, the authorized user ID will be used.
  # @option opts [String] :visible_to Visibility of the organization. If omitted, visibility will not be changed.&lt;dl class&#x3D;\&quot;fields-list\&quot;&gt;&lt;dt&gt;1&lt;/dt&gt;&lt;dd&gt;Owner &amp;amp; followers (private)&lt;/dd&gt;&lt;dt&gt;3&lt;/dt&gt;&lt;dd&gt;Entire company (shared)&lt;/dd&gt;&lt;/dl&gt;
  # @return [nil]
  describe 'organizations_id_put test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for organizations_post
  # Add an organization
  # Adds a new organization. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys. To determine which custom fields exists, fetch the organizationFields and look for &#39;key&#39; values.
  # @param name Organization name
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :owner_id ID of the user who will be marked as the owner of this organization. When omitted, the authorized user ID will be used.
  # @option opts [String] :visible_to Visibility of the organization. If omitted, visibility will be set to the default visibility setting of this item type for the authorized user.&lt;dl class&#x3D;\&quot;fields-list\&quot;&gt;&lt;dt&gt;1&lt;/dt&gt;&lt;dd&gt;Owner &amp;amp; followers (private)&lt;/dd&gt;&lt;dt&gt;3&lt;/dt&gt;&lt;dd&gt;Entire company (shared)&lt;/dd&gt;&lt;/dl&gt;
  # @option opts [String] :add_time Optional creation date &amp; time of the organization in UTC. Requires admin user API token. Format: YYYY-MM-DD HH:MM:SS
  # @return [nil]
  describe 'organizations_post test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
