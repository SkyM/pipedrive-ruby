=begin
#Pipedrive API v1

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module Pipedrive
  class UsersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Find users by name
    # Finds users by their name.
    # @param term Search term to look for
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search_by_email When enabled, term will only be matched against email addresses of users. Default: false (default to )
    # @return [nil]
    def users_find_get(term, opts = {})
      users_find_get_with_http_info(term, opts)
      return nil
    end

    # Find users by name
    # Finds users by their name.
    # @param term Search term to look for
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search_by_email When enabled, term will only be matched against email addresses of users. Default: false
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def users_find_get_with_http_info(term, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UsersApi.users_find_get ..."
      end
      # verify the required parameter 'term' is set
      if @api_client.config.client_side_validation && term.nil?
        fail ArgumentError, "Missing the required parameter 'term' when calling UsersApi.users_find_get"
      end
      # resource path
      local_var_path = "/users/find"

      # query parameters
      query_params = {}
      query_params[:'term'] = term
      query_params[:'search_by_email'] = opts[:'search_by_email'] if !opts[:'search_by_email'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#users_find_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all users
    # Returns data about all users within the company
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def users_get(opts = {})
      users_get_with_http_info(opts)
      return nil
    end

    # Get all users
    # Returns data about all users within the company
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def users_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UsersApi.users_get ..."
      end
      # resource path
      local_var_path = "/users"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#users_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List and filter activities assigned to a specific user
    # Lists activities assigned to a specific user, with optional due_date and type filtering.
    # @param id ID of the user
    # @param [Hash] opts the optional parameters
    # @option opts [String] :due_date Either a due date in YYYY-MM-DD format, or one of the following: all, overdue, today, tomorrow, this_week, next_week (default to )
    # @option opts [String] :type Filter activities based on ActivityType&#39;s key_string (examples: call, meeting) (default to )
    # @option opts [Float] :start Pagination start (default to 0)
    # @option opts [Float] :limit Items shown per page
    # @option opts [String] :done Whether to fetch done (1) or undone (0) activities. If omitted from request, both undone and done activities are fetched. (default to )
    # @return [nil]
    def users_id_activities_get(id, opts = {})
      users_id_activities_get_with_http_info(id, opts)
      return nil
    end

    # List and filter activities assigned to a specific user
    # Lists activities assigned to a specific user, with optional due_date and type filtering.
    # @param id ID of the user
    # @param [Hash] opts the optional parameters
    # @option opts [String] :due_date Either a due date in YYYY-MM-DD format, or one of the following: all, overdue, today, tomorrow, this_week, next_week
    # @option opts [String] :type Filter activities based on ActivityType&#39;s key_string (examples: call, meeting)
    # @option opts [Float] :start Pagination start
    # @option opts [Float] :limit Items shown per page
    # @option opts [String] :done Whether to fetch done (1) or undone (0) activities. If omitted from request, both undone and done activities are fetched.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def users_id_activities_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UsersApi.users_id_activities_get ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.users_id_activities_get"
      end
      # resource path
      local_var_path = "/users/{id}/activities".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'due_date'] = opts[:'due_date'] if !opts[:'due_date'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'done'] = opts[:'done'] if !opts[:'done'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#users_id_activities_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List blacklisted email addresses of a user
    # Lists blacklisted email addresses of a specific user. Blacklisted emails are such that will not get synced in to Pipedrive when using the built-in Mailbox.
    # @param id ID of the user
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def users_id_blacklisted_emails_get(id, opts = {})
      users_id_blacklisted_emails_get_with_http_info(id, opts)
      return nil
    end

    # List blacklisted email addresses of a user
    # Lists blacklisted email addresses of a specific user. Blacklisted emails are such that will not get synced in to Pipedrive when using the built-in Mailbox.
    # @param id ID of the user
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def users_id_blacklisted_emails_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UsersApi.users_id_blacklisted_emails_get ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.users_id_blacklisted_emails_get"
      end
      # resource path
      local_var_path = "/users/{id}/blacklistedEmails".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#users_id_blacklisted_emails_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add blacklisted email address for a user
    # Add blacklisted email address for a specific user.
    # @param id ID of the user
    # @param address Email address to blacklist (can contain \\* for wildcards, e.g. \\*@example.com, or john\\*@ex\\*.com)
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def users_id_blacklisted_emails_post(id, address, opts = {})
      users_id_blacklisted_emails_post_with_http_info(id, address, opts)
      return nil
    end

    # Add blacklisted email address for a user
    # Add blacklisted email address for a specific user.
    # @param id ID of the user
    # @param address Email address to blacklist (can contain \\* for wildcards, e.g. \\*@example.com, or john\\*@ex\\*.com)
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def users_id_blacklisted_emails_post_with_http_info(id, address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UsersApi.users_id_blacklisted_emails_post ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.users_id_blacklisted_emails_post"
      end
      # verify the required parameter 'address' is set
      if @api_client.config.client_side_validation && address.nil?
        fail ArgumentError, "Missing the required parameter 'address' when calling UsersApi.users_id_blacklisted_emails_post"
      end
      # resource path
      local_var_path = "/users/{id}/blacklistedEmails".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}
      form_params["address"] = address

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#users_id_blacklisted_emails_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List followers of a user
    # Lists followers of a specific user.
    # @param id ID of the user
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def users_id_followers_get(id, opts = {})
      users_id_followers_get_with_http_info(id, opts)
      return nil
    end

    # List followers of a user
    # Lists followers of a specific user.
    # @param id ID of the user
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def users_id_followers_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UsersApi.users_id_followers_get ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.users_id_followers_get"
      end
      # resource path
      local_var_path = "/users/{id}/followers".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#users_id_followers_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get one user
    # Returns data about a specific user within the company
    # @param id ID of the user to fetch.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def users_id_get(id, opts = {})
      users_id_get_with_http_info(id, opts)
      return nil
    end

    # Get one user
    # Returns data about a specific user within the company
    # @param id ID of the user to fetch.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def users_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UsersApi.users_id_get ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.users_id_get"
      end
      # resource path
      local_var_path = "/users/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#users_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a permission set assignment
    # Delete a permission set assignment for a user
    # @param id ID of the user
    # @param permission_set_id ID of the permission set
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def users_id_permission_set_assignments_delete(id, permission_set_id, opts = {})
      users_id_permission_set_assignments_delete_with_http_info(id, permission_set_id, opts)
      return nil
    end

    # Delete a permission set assignment
    # Delete a permission set assignment for a user
    # @param id ID of the user
    # @param permission_set_id ID of the permission set
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def users_id_permission_set_assignments_delete_with_http_info(id, permission_set_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UsersApi.users_id_permission_set_assignments_delete ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.users_id_permission_set_assignments_delete"
      end
      # verify the required parameter 'permission_set_id' is set
      if @api_client.config.client_side_validation && permission_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'permission_set_id' when calling UsersApi.users_id_permission_set_assignments_delete"
      end
      # resource path
      local_var_path = "/users/{id}/permissionSetAssignments".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'permission_set_id'] = permission_set_id

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#users_id_permission_set_assignments_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List permission set assignments
    # List permission set assignments for a user
    # @param id ID of the user
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :start Pagination start (default to 0)
    # @option opts [Float] :limit Items shown per page
    # @return [nil]
    def users_id_permission_set_assignments_get(id, opts = {})
      users_id_permission_set_assignments_get_with_http_info(id, opts)
      return nil
    end

    # List permission set assignments
    # List permission set assignments for a user
    # @param id ID of the user
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :start Pagination start
    # @option opts [Float] :limit Items shown per page
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def users_id_permission_set_assignments_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UsersApi.users_id_permission_set_assignments_get ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.users_id_permission_set_assignments_get"
      end
      # resource path
      local_var_path = "/users/{id}/permissionSetAssignments".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#users_id_permission_set_assignments_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add permission set assignment
    # Add permission set assignment for a user
    # @param id ID of the user
    # @param permission_set_id ID of the permission set
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def users_id_permission_set_assignments_post(id, permission_set_id, opts = {})
      users_id_permission_set_assignments_post_with_http_info(id, permission_set_id, opts)
      return nil
    end

    # Add permission set assignment
    # Add permission set assignment for a user
    # @param id ID of the user
    # @param permission_set_id ID of the permission set
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def users_id_permission_set_assignments_post_with_http_info(id, permission_set_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UsersApi.users_id_permission_set_assignments_post ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.users_id_permission_set_assignments_post"
      end
      # verify the required parameter 'permission_set_id' is set
      if @api_client.config.client_side_validation && permission_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'permission_set_id' when calling UsersApi.users_id_permission_set_assignments_post"
      end
      # resource path
      local_var_path = "/users/{id}/permissionSetAssignments".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}
      form_params["permission_set_id"] = permission_set_id

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#users_id_permission_set_assignments_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List user permissions
    # List aggregated permissions over all assigned permission sets for a user
    # @param id ID of the user
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def users_id_permissions_get(id, opts = {})
      users_id_permissions_get_with_http_info(id, opts)
      return nil
    end

    # List user permissions
    # List aggregated permissions over all assigned permission sets for a user
    # @param id ID of the user
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def users_id_permissions_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UsersApi.users_id_permissions_get ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.users_id_permissions_get"
      end
      # resource path
      local_var_path = "/users/{id}/permissions".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#users_id_permissions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update user details
    # Updates the properties of a user. Currently, only active_flag can be updated.
    # @param id ID of the user
    # @param active_flag Whether the user is active or not. 0 &#x3D; Not activated, 1 &#x3D; Activated
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def users_id_put(id, active_flag, opts = {})
      users_id_put_with_http_info(id, active_flag, opts)
      return nil
    end

    # Update user details
    # Updates the properties of a user. Currently, only active_flag can be updated.
    # @param id ID of the user
    # @param active_flag Whether the user is active or not. 0 &#x3D; Not activated, 1 &#x3D; Activated
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def users_id_put_with_http_info(id, active_flag, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UsersApi.users_id_put ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.users_id_put"
      end
      # verify the required parameter 'active_flag' is set
      if @api_client.config.client_side_validation && active_flag.nil?
        fail ArgumentError, "Missing the required parameter 'active_flag' when calling UsersApi.users_id_put"
      end
      # resource path
      local_var_path = "/users/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}
      form_params["active_flag"] = active_flag

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#users_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a role assignment
    # Delete a role assignment for a user
    # @param id ID of the user
    # @param role_id ID of the role
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def users_id_role_assignments_delete(id, role_id, opts = {})
      users_id_role_assignments_delete_with_http_info(id, role_id, opts)
      return nil
    end

    # Delete a role assignment
    # Delete a role assignment for a user
    # @param id ID of the user
    # @param role_id ID of the role
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def users_id_role_assignments_delete_with_http_info(id, role_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UsersApi.users_id_role_assignments_delete ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.users_id_role_assignments_delete"
      end
      # verify the required parameter 'role_id' is set
      if @api_client.config.client_side_validation && role_id.nil?
        fail ArgumentError, "Missing the required parameter 'role_id' when calling UsersApi.users_id_role_assignments_delete"
      end
      # resource path
      local_var_path = "/users/{id}/roleAssignments".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'role_id'] = role_id

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#users_id_role_assignments_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List role assignments
    # List role assignments for a user
    # @param id ID of the user
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :start Pagination start (default to 0)
    # @option opts [Float] :limit Items shown per page
    # @return [nil]
    def users_id_role_assignments_get(id, opts = {})
      users_id_role_assignments_get_with_http_info(id, opts)
      return nil
    end

    # List role assignments
    # List role assignments for a user
    # @param id ID of the user
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :start Pagination start
    # @option opts [Float] :limit Items shown per page
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def users_id_role_assignments_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UsersApi.users_id_role_assignments_get ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.users_id_role_assignments_get"
      end
      # resource path
      local_var_path = "/users/{id}/roleAssignments".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#users_id_role_assignments_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add role assignment
    # Add role assignment for a user
    # @param id ID of the user
    # @param role_id ID of the role
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def users_id_role_assignments_post(id, role_id, opts = {})
      users_id_role_assignments_post_with_http_info(id, role_id, opts)
      return nil
    end

    # Add role assignment
    # Add role assignment for a user
    # @param id ID of the user
    # @param role_id ID of the role
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def users_id_role_assignments_post_with_http_info(id, role_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UsersApi.users_id_role_assignments_post ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.users_id_role_assignments_post"
      end
      # verify the required parameter 'role_id' is set
      if @api_client.config.client_side_validation && role_id.nil?
        fail ArgumentError, "Missing the required parameter 'role_id' when calling UsersApi.users_id_role_assignments_post"
      end
      # resource path
      local_var_path = "/users/{id}/roleAssignments".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}
      form_params["role_id"] = role_id

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#users_id_role_assignments_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List user role settings
    # List settings of user's assigned role
    # @param id ID of the user
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def users_id_role_settings_get(id, opts = {})
      users_id_role_settings_get_with_http_info(id, opts)
      return nil
    end

    # List user role settings
    # List settings of user&#39;s assigned role
    # @param id ID of the user
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def users_id_role_settings_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UsersApi.users_id_role_settings_get ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.users_id_role_settings_get"
      end
      # resource path
      local_var_path = "/users/{id}/roleSettings".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#users_id_role_settings_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a new user
    # Adds a new user to the company, returns the ID upon success.
    # @param name Name of the user
    # @param email Email of the user
    # @param active_flag Whether the user is active or not. 0 &#x3D; Not activated, 1 &#x3D; Activated
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def users_post(name, email, active_flag, opts = {})
      users_post_with_http_info(name, email, active_flag, opts)
      return nil
    end

    # Add a new user
    # Adds a new user to the company, returns the ID upon success.
    # @param name Name of the user
    # @param email Email of the user
    # @param active_flag Whether the user is active or not. 0 &#x3D; Not activated, 1 &#x3D; Activated
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def users_post_with_http_info(name, email, active_flag, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UsersApi.users_post ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling UsersApi.users_post"
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling UsersApi.users_post"
      end
      # verify the required parameter 'active_flag' is set
      if @api_client.config.client_side_validation && active_flag.nil?
        fail ArgumentError, "Missing the required parameter 'active_flag' when calling UsersApi.users_post"
      end
      # resource path
      local_var_path = "/users"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}
      form_params["name"] = name
      form_params["email"] = email
      form_params["active_flag"] = active_flag

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#users_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
