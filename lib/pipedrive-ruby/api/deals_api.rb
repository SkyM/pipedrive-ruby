=begin
#Pipedrive API v1

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module Pipedrive
  class DealsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Delete multiple deals in bulk
    # Marks multiple deals as deleted.
    # @param ids Comma-separated IDs that will be deleted
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def deals_delete(ids, opts = {})
      deals_delete_with_http_info(ids, opts)
      return nil
    end

    # Delete multiple deals in bulk
    # Marks multiple deals as deleted.
    # @param ids Comma-separated IDs that will be deleted
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def deals_delete_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DealsApi.deals_delete ..."
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling DealsApi.deals_delete"
      end
      # resource path
      local_var_path = "/deals"

      # query parameters
      query_params = {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :csv)

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#deals_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Find deals by name
    # Searches all deals by their title.
    # @param term Search term to look for
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :person_id ID of the person deal is associated with.
    # @option opts [Float] :org_id ID of the organization deal is associated with.
    # @return [nil]
    def deals_find_get(term, opts = {})
      deals_find_get_with_http_info(term, opts)
      return nil
    end

    # Find deals by name
    # Searches all deals by their title.
    # @param term Search term to look for
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :person_id ID of the person deal is associated with.
    # @option opts [Float] :org_id ID of the organization deal is associated with.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def deals_find_get_with_http_info(term, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DealsApi.deals_find_get ..."
      end
      # verify the required parameter 'term' is set
      if @api_client.config.client_side_validation && term.nil?
        fail ArgumentError, "Missing the required parameter 'term' when calling DealsApi.deals_find_get"
      end
      # resource path
      local_var_path = "/deals/find"

      # query parameters
      query_params = {}
      query_params[:'term'] = term
      query_params[:'person_id'] = opts[:'person_id'] if !opts[:'person_id'].nil?
      query_params[:'org_id'] = opts[:'org_id'] if !opts[:'org_id'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#deals_find_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all deals
    # Returns all deals
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :user_id If supplied, only deals matching the given user will be returned.
    # @option opts [Float] :filter_id ID of the filter to use
    # @option opts [Float] :stage_id If supplied, only deals within the given stage will be returned.
    # @option opts [String] :status Only fetch deals with specific status. If omitted, all not deleted deals are fetched. (default to all_not_deleted)
    # @option opts [Float] :start Pagination start (default to 0)
    # @option opts [Float] :limit Items shown per page. Default limit is 100, maximum limit is 500.
    # @option opts [String] :sort Field names and sorting mode separated by comma (field_name_1 ASC, field_name_2 DESC). Only first-level field keys are supported (no nested keys). (default to )
    # @option opts [String] :owned_by_you When supplied, only deals owned by you are returned. However filter_id takes precedence over owned_by_you when both are supplied. (default to )
    # @return [nil]
    def deals_get(opts = {})
      deals_get_with_http_info(opts)
      return nil
    end

    # Get all deals
    # Returns all deals
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :user_id If supplied, only deals matching the given user will be returned.
    # @option opts [Float] :filter_id ID of the filter to use
    # @option opts [Float] :stage_id If supplied, only deals within the given stage will be returned.
    # @option opts [String] :status Only fetch deals with specific status. If omitted, all not deleted deals are fetched.
    # @option opts [Float] :start Pagination start
    # @option opts [Float] :limit Items shown per page. Default limit is 100, maximum limit is 500.
    # @option opts [String] :sort Field names and sorting mode separated by comma (field_name_1 ASC, field_name_2 DESC). Only first-level field keys are supported (no nested keys).
    # @option opts [String] :owned_by_you When supplied, only deals owned by you are returned. However filter_id takes precedence over owned_by_you when both are supplied.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def deals_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DealsApi.deals_get ..."
      end
      # resource path
      local_var_path = "/deals"

      # query parameters
      query_params = {}
      query_params[:'user_id'] = opts[:'user_id'] if !opts[:'user_id'].nil?
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'stage_id'] = opts[:'stage_id'] if !opts[:'stage_id'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'owned_by_you'] = opts[:'owned_by_you'] if !opts[:'owned_by_you'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#deals_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List activities associated with a deal
    # Lists activities associated with a deal.
    # @param id ID of the deal
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :start Pagination start (default to 0)
    # @option opts [Float] :limit Items shown per page
    # @option opts [String] :done Whether to fetch done (1) or undone (0) activities. If omitted from request, both undone and done activities are fetched. (default to )
    # @option opts [String] :exclude A comma-separated string of activity IDs to exclude from result (default to )
    # @return [nil]
    def deals_id_activities_get(id, opts = {})
      deals_id_activities_get_with_http_info(id, opts)
      return nil
    end

    # List activities associated with a deal
    # Lists activities associated with a deal.
    # @param id ID of the deal
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :start Pagination start
    # @option opts [Float] :limit Items shown per page
    # @option opts [String] :done Whether to fetch done (1) or undone (0) activities. If omitted from request, both undone and done activities are fetched.
    # @option opts [String] :exclude A comma-separated string of activity IDs to exclude from result
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def deals_id_activities_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DealsApi.deals_id_activities_get ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DealsApi.deals_id_activities_get"
      end
      # resource path
      local_var_path = "/deals/{id}/activities".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'done'] = opts[:'done'] if !opts[:'done'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#deals_id_activities_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a deal
    # Marks a deal as deleted.
    # @param id ID of the deal
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def deals_id_delete(id, opts = {})
      deals_id_delete_with_http_info(id, opts)
      return nil
    end

    # Delete a deal
    # Marks a deal as deleted.
    # @param id ID of the deal
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def deals_id_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DealsApi.deals_id_delete ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DealsApi.deals_id_delete"
      end
      # resource path
      local_var_path = "/deals/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#deals_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Duplicate deal
    # Duplicate a deal
    # @param id ID of the deal that will be duplicated
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def deals_id_duplicate_post(id, opts = {})
      deals_id_duplicate_post_with_http_info(id, opts)
      return nil
    end

    # Duplicate deal
    # Duplicate a deal
    # @param id ID of the deal that will be duplicated
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def deals_id_duplicate_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DealsApi.deals_id_duplicate_post ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DealsApi.deals_id_duplicate_post"
      end
      # resource path
      local_var_path = "/deals/{id}/duplicate".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#deals_id_duplicate_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List files attached to a deal
    # Lists files associated with a deal.
    # @param id ID of the deal
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :start Pagination start (default to 0)
    # @option opts [Float] :limit Items shown per page
    # @option opts [String] :include_deleted_files When enabled, the list of files will also include deleted files. Please note that trying to download these files will not work. (default to )
    # @option opts [String] :sort Field names and sorting mode separated by comma (field_name_1 ASC, field_name_2 DESC). Only first-level field keys are supported (no nested keys). Supported fields: id, user_id, deal_id, person_id, org_id, product_id, add_time, update_time, file_name, file_type, file_size, comment. (default to )
    # @return [nil]
    def deals_id_files_get(id, opts = {})
      deals_id_files_get_with_http_info(id, opts)
      return nil
    end

    # List files attached to a deal
    # Lists files associated with a deal.
    # @param id ID of the deal
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :start Pagination start
    # @option opts [Float] :limit Items shown per page
    # @option opts [String] :include_deleted_files When enabled, the list of files will also include deleted files. Please note that trying to download these files will not work.
    # @option opts [String] :sort Field names and sorting mode separated by comma (field_name_1 ASC, field_name_2 DESC). Only first-level field keys are supported (no nested keys). Supported fields: id, user_id, deal_id, person_id, org_id, product_id, add_time, update_time, file_name, file_type, file_size, comment.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def deals_id_files_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DealsApi.deals_id_files_get ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DealsApi.deals_id_files_get"
      end
      # resource path
      local_var_path = "/deals/{id}/files".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'include_deleted_files'] = opts[:'include_deleted_files'] if !opts[:'include_deleted_files'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#deals_id_files_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List updates about a deal
    # Lists updates about a deal.
    # @param id ID of the deal
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :start Pagination start (default to 0)
    # @option opts [Float] :limit Items shown per page
    # @return [nil]
    def deals_id_flow_get(id, opts = {})
      deals_id_flow_get_with_http_info(id, opts)
      return nil
    end

    # List updates about a deal
    # Lists updates about a deal.
    # @param id ID of the deal
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :start Pagination start
    # @option opts [Float] :limit Items shown per page
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def deals_id_flow_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DealsApi.deals_id_flow_get ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DealsApi.deals_id_flow_get"
      end
      # resource path
      local_var_path = "/deals/{id}/flow".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#deals_id_flow_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a follower from a deal
    # Deletes a follower from a deal.
    # @param id ID of the deal
    # @param follower_id ID of the follower
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def deals_id_followers_follower_id_delete(id, follower_id, opts = {})
      deals_id_followers_follower_id_delete_with_http_info(id, follower_id, opts)
      return nil
    end

    # Delete a follower from a deal
    # Deletes a follower from a deal.
    # @param id ID of the deal
    # @param follower_id ID of the follower
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def deals_id_followers_follower_id_delete_with_http_info(id, follower_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DealsApi.deals_id_followers_follower_id_delete ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DealsApi.deals_id_followers_follower_id_delete"
      end
      # verify the required parameter 'follower_id' is set
      if @api_client.config.client_side_validation && follower_id.nil?
        fail ArgumentError, "Missing the required parameter 'follower_id' when calling DealsApi.deals_id_followers_follower_id_delete"
      end
      # resource path
      local_var_path = "/deals/{id}/followers/{follower_id}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'follower_id' + '}', follower_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#deals_id_followers_follower_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List followers of a deal
    # Lists the followers of a deal.
    # @param id ID of the deal
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def deals_id_followers_get(id, opts = {})
      deals_id_followers_get_with_http_info(id, opts)
      return nil
    end

    # List followers of a deal
    # Lists the followers of a deal.
    # @param id ID of the deal
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def deals_id_followers_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DealsApi.deals_id_followers_get ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DealsApi.deals_id_followers_get"
      end
      # resource path
      local_var_path = "/deals/{id}/followers".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#deals_id_followers_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a follower to a deal
    # Adds a follower to a deal.
    # @param id ID of the deal
    # @param user_id ID of the user
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def deals_id_followers_post(id, user_id, opts = {})
      deals_id_followers_post_with_http_info(id, user_id, opts)
      return nil
    end

    # Add a follower to a deal
    # Adds a follower to a deal.
    # @param id ID of the deal
    # @param user_id ID of the user
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def deals_id_followers_post_with_http_info(id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DealsApi.deals_id_followers_post ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DealsApi.deals_id_followers_post"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DealsApi.deals_id_followers_post"
      end
      # resource path
      local_var_path = "/deals/{id}/followers".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}
      form_params["user_id"] = user_id

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#deals_id_followers_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get details of a deal
    # Returns details of a specific deal. Note that this also returns some additional fields which are not present when asking for all deals – such as deal age and stay in pipeline stages. Also note that custom fields appear as long hashes in the resulting data. These hashes can be mapped against the 'key' value of dealFields.
    # @param id ID of the deal
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def deals_id_get(id, opts = {})
      deals_id_get_with_http_info(id, opts)
      return nil
    end

    # Get details of a deal
    # Returns details of a specific deal. Note that this also returns some additional fields which are not present when asking for all deals – such as deal age and stay in pipeline stages. Also note that custom fields appear as long hashes in the resulting data. These hashes can be mapped against the &#39;key&#39; value of dealFields.
    # @param id ID of the deal
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def deals_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DealsApi.deals_id_get ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DealsApi.deals_id_get"
      end
      # resource path
      local_var_path = "/deals/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#deals_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List mail messages associated with a deal
    # Lists mail messages associated with a deal.
    # @param id ID of the deal
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :start Pagination start (default to 0)
    # @option opts [Float] :limit Items shown per page
    # @return [nil]
    def deals_id_mail_messages_get(id, opts = {})
      deals_id_mail_messages_get_with_http_info(id, opts)
      return nil
    end

    # List mail messages associated with a deal
    # Lists mail messages associated with a deal.
    # @param id ID of the deal
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :start Pagination start
    # @option opts [Float] :limit Items shown per page
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def deals_id_mail_messages_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DealsApi.deals_id_mail_messages_get ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DealsApi.deals_id_mail_messages_get"
      end
      # resource path
      local_var_path = "/deals/{id}/mailMessages".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#deals_id_mail_messages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Merge two deals
    # Merges a deal with another deal.
    # @param id ID of the deal that will be merged
    # @param merge_with_id ID of the deal that the deal will be merged with
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def deals_id_merge_put(id, merge_with_id, opts = {})
      deals_id_merge_put_with_http_info(id, merge_with_id, opts)
      return nil
    end

    # Merge two deals
    # Merges a deal with another deal.
    # @param id ID of the deal that will be merged
    # @param merge_with_id ID of the deal that the deal will be merged with
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def deals_id_merge_put_with_http_info(id, merge_with_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DealsApi.deals_id_merge_put ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DealsApi.deals_id_merge_put"
      end
      # verify the required parameter 'merge_with_id' is set
      if @api_client.config.client_side_validation && merge_with_id.nil?
        fail ArgumentError, "Missing the required parameter 'merge_with_id' when calling DealsApi.deals_id_merge_put"
      end
      # resource path
      local_var_path = "/deals/{id}/merge".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}
      form_params["merge_with_id"] = merge_with_id

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#deals_id_merge_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a participant from a deal
    # Deletes a participant from a deal.
    # @param id ID of the deal
    # @param deal_participant_id ID of the deal participant
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def deals_id_participants_deal_participant_id_delete(id, deal_participant_id, opts = {})
      deals_id_participants_deal_participant_id_delete_with_http_info(id, deal_participant_id, opts)
      return nil
    end

    # Delete a participant from a deal
    # Deletes a participant from a deal.
    # @param id ID of the deal
    # @param deal_participant_id ID of the deal participant
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def deals_id_participants_deal_participant_id_delete_with_http_info(id, deal_participant_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DealsApi.deals_id_participants_deal_participant_id_delete ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DealsApi.deals_id_participants_deal_participant_id_delete"
      end
      # verify the required parameter 'deal_participant_id' is set
      if @api_client.config.client_side_validation && deal_participant_id.nil?
        fail ArgumentError, "Missing the required parameter 'deal_participant_id' when calling DealsApi.deals_id_participants_deal_participant_id_delete"
      end
      # resource path
      local_var_path = "/deals/{id}/participants/{deal_participant_id}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'deal_participant_id' + '}', deal_participant_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#deals_id_participants_deal_participant_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List participants of a deal
    # Lists participants associated with a deal.
    # @param id ID of the deal
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :start Pagination start (default to 0)
    # @option opts [Float] :limit Items shown per page
    # @return [nil]
    def deals_id_participants_get(id, opts = {})
      deals_id_participants_get_with_http_info(id, opts)
      return nil
    end

    # List participants of a deal
    # Lists participants associated with a deal.
    # @param id ID of the deal
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :start Pagination start
    # @option opts [Float] :limit Items shown per page
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def deals_id_participants_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DealsApi.deals_id_participants_get ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DealsApi.deals_id_participants_get"
      end
      # resource path
      local_var_path = "/deals/{id}/participants".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#deals_id_participants_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a participant to a deal
    # Adds a participant to a deal.
    # @param id ID of the deal
    # @param person_id ID of the person
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def deals_id_participants_post(id, person_id, opts = {})
      deals_id_participants_post_with_http_info(id, person_id, opts)
      return nil
    end

    # Add a participant to a deal
    # Adds a participant to a deal.
    # @param id ID of the deal
    # @param person_id ID of the person
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def deals_id_participants_post_with_http_info(id, person_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DealsApi.deals_id_participants_post ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DealsApi.deals_id_participants_post"
      end
      # verify the required parameter 'person_id' is set
      if @api_client.config.client_side_validation && person_id.nil?
        fail ArgumentError, "Missing the required parameter 'person_id' when calling DealsApi.deals_id_participants_post"
      end
      # resource path
      local_var_path = "/deals/{id}/participants".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}
      form_params["person_id"] = person_id

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#deals_id_participants_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List permitted users
    # List users permitted to access a deal
    # @param id ID of the deal
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_level If set, filter results by allowed access level. 1 &#x3D; Read, 2 &#x3D; Write, 3 &#x3D; Read+Write (default to )
    # @return [nil]
    def deals_id_permitted_users_get(id, opts = {})
      deals_id_permitted_users_get_with_http_info(id, opts)
      return nil
    end

    # List permitted users
    # List users permitted to access a deal
    # @param id ID of the deal
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_level If set, filter results by allowed access level. 1 &#x3D; Read, 2 &#x3D; Write, 3 &#x3D; Read+Write
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def deals_id_permitted_users_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DealsApi.deals_id_permitted_users_get ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DealsApi.deals_id_permitted_users_get"
      end
      # resource path
      local_var_path = "/deals/{id}/permittedUsers".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'access_level'] = opts[:'access_level'] if !opts[:'access_level'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#deals_id_permitted_users_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all persons associated with a deal
    # Lists all persons associated with a deal, regardless of whether the person is the primary contact of the deal, or added as a participant.
    # @param id ID of the deal
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :start Pagination start (default to 0)
    # @option opts [Float] :limit Items shown per page
    # @return [nil]
    def deals_id_persons_get(id, opts = {})
      deals_id_persons_get_with_http_info(id, opts)
      return nil
    end

    # List all persons associated with a deal
    # Lists all persons associated with a deal, regardless of whether the person is the primary contact of the deal, or added as a participant.
    # @param id ID of the deal
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :start Pagination start
    # @option opts [Float] :limit Items shown per page
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def deals_id_persons_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DealsApi.deals_id_persons_get ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DealsApi.deals_id_persons_get"
      end
      # resource path
      local_var_path = "/deals/{id}/persons".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#deals_id_persons_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update product attachment details of the deal-product (a product already attached to a deal)
    # Updates product attachment details.
    # @param id ID of the deal
    # @param deal_product_id ID of the deal-product (the ID of the product attached to the deal)
    # @param item_price Price at which this product will be added to the deal
    # @param quantity Quantity – e.g. how many items of this product will be added to the deal
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :discount_percentage Discount % (default to 0)
    # @option opts [Float] :duration Duration of the product (default to 1)
    # @option opts [Float] :product_variation_id ID of the product variation to use.
    # @option opts [String] :comments Any textual comment associated with this product-deal attachment. Visible and editable in the application UI. (default to )
    # @option opts [String] :enabled_flag Whether the product is enabled on the deal or not. This makes it possible to add products to a deal with specific price and discount criteria - but keep them disabled, which refrains them from being included in deal price calculation. (default to )
    # @return [nil]
    def deals_id_products_deal_product_id_put(id, deal_product_id, item_price, quantity, opts = {})
      deals_id_products_deal_product_id_put_with_http_info(id, deal_product_id, item_price, quantity, opts)
      return nil
    end

    # Update product attachment details of the deal-product (a product already attached to a deal)
    # Updates product attachment details.
    # @param id ID of the deal
    # @param deal_product_id ID of the deal-product (the ID of the product attached to the deal)
    # @param item_price Price at which this product will be added to the deal
    # @param quantity Quantity – e.g. how many items of this product will be added to the deal
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :discount_percentage Discount %
    # @option opts [Float] :duration Duration of the product
    # @option opts [Float] :product_variation_id ID of the product variation to use.
    # @option opts [String] :comments Any textual comment associated with this product-deal attachment. Visible and editable in the application UI.
    # @option opts [String] :enabled_flag Whether the product is enabled on the deal or not. This makes it possible to add products to a deal with specific price and discount criteria - but keep them disabled, which refrains them from being included in deal price calculation.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def deals_id_products_deal_product_id_put_with_http_info(id, deal_product_id, item_price, quantity, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DealsApi.deals_id_products_deal_product_id_put ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DealsApi.deals_id_products_deal_product_id_put"
      end
      # verify the required parameter 'deal_product_id' is set
      if @api_client.config.client_side_validation && deal_product_id.nil?
        fail ArgumentError, "Missing the required parameter 'deal_product_id' when calling DealsApi.deals_id_products_deal_product_id_put"
      end
      # verify the required parameter 'item_price' is set
      if @api_client.config.client_side_validation && item_price.nil?
        fail ArgumentError, "Missing the required parameter 'item_price' when calling DealsApi.deals_id_products_deal_product_id_put"
      end
      # verify the required parameter 'quantity' is set
      if @api_client.config.client_side_validation && quantity.nil?
        fail ArgumentError, "Missing the required parameter 'quantity' when calling DealsApi.deals_id_products_deal_product_id_put"
      end
      # resource path
      local_var_path = "/deals/{id}/products/{deal_product_id}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'deal_product_id' + '}', deal_product_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}
      form_params["item_price"] = item_price
      form_params["quantity"] = quantity
      form_params["discount_percentage"] = opts[:'discount_percentage'] if !opts[:'discount_percentage'].nil?
      form_params["duration"] = opts[:'duration'] if !opts[:'duration'].nil?
      form_params["product_variation_id"] = opts[:'product_variation_id'] if !opts[:'product_variation_id'].nil?
      form_params["comments"] = opts[:'comments'] if !opts[:'comments'].nil?
      form_params["enabled_flag"] = opts[:'enabled_flag'] if !opts[:'enabled_flag'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#deals_id_products_deal_product_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List products attached to a deal
    # Lists products attached to a deal.
    # @param id ID of the deal
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :start Pagination start (default to 0)
    # @option opts [Float] :limit Items shown per page
    # @option opts [String] :include_product_data Whether to fetch product data along with each attached product (1) or not (0, default). (default to )
    # @return [nil]
    def deals_id_products_get(id, opts = {})
      deals_id_products_get_with_http_info(id, opts)
      return nil
    end

    # List products attached to a deal
    # Lists products attached to a deal.
    # @param id ID of the deal
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :start Pagination start
    # @option opts [Float] :limit Items shown per page
    # @option opts [String] :include_product_data Whether to fetch product data along with each attached product (1) or not (0, default).
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def deals_id_products_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DealsApi.deals_id_products_get ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DealsApi.deals_id_products_get"
      end
      # resource path
      local_var_path = "/deals/{id}/products".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'include_product_data'] = opts[:'include_product_data'] if !opts[:'include_product_data'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#deals_id_products_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a product to the deal, eventually creating a new item called a deal-product.
    # Adds a product to the deal.
    # @param id ID of the deal
    # @param product_id ID of the product that will be attached
    # @param item_price Price at which this product will be added to the deal
    # @param quantity Quantity – e.g. how many items of this product will be added to the deal
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :discount_percentage Discount %. If omitted, will be set to 0 (default to 0)
    # @option opts [Float] :duration Duration of the product (when product durations are not enabled for the company or if omitted, defaults to 1) (default to 1)
    # @option opts [Float] :product_variation_id ID of the product variation to use. When omitted, no variation will be used.
    # @option opts [String] :comments Any textual comment associated with this product-deal attachment. Visible and editable in the application UI. (default to )
    # @option opts [String] :enabled_flag Whether the product is enabled on the deal or not. This makes it possible to add products to a deal with specific price and discount criteria - but keep them disabled, which refrains them from being included in deal price calculation. When omitted, the product will be marked as enabled by default. (default to )
    # @return [nil]
    def deals_id_products_post(id, product_id, item_price, quantity, opts = {})
      deals_id_products_post_with_http_info(id, product_id, item_price, quantity, opts)
      return nil
    end

    # Add a product to the deal, eventually creating a new item called a deal-product.
    # Adds a product to the deal.
    # @param id ID of the deal
    # @param product_id ID of the product that will be attached
    # @param item_price Price at which this product will be added to the deal
    # @param quantity Quantity – e.g. how many items of this product will be added to the deal
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :discount_percentage Discount %. If omitted, will be set to 0
    # @option opts [Float] :duration Duration of the product (when product durations are not enabled for the company or if omitted, defaults to 1)
    # @option opts [Float] :product_variation_id ID of the product variation to use. When omitted, no variation will be used.
    # @option opts [String] :comments Any textual comment associated with this product-deal attachment. Visible and editable in the application UI.
    # @option opts [String] :enabled_flag Whether the product is enabled on the deal or not. This makes it possible to add products to a deal with specific price and discount criteria - but keep them disabled, which refrains them from being included in deal price calculation. When omitted, the product will be marked as enabled by default.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def deals_id_products_post_with_http_info(id, product_id, item_price, quantity, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DealsApi.deals_id_products_post ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DealsApi.deals_id_products_post"
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling DealsApi.deals_id_products_post"
      end
      # verify the required parameter 'item_price' is set
      if @api_client.config.client_side_validation && item_price.nil?
        fail ArgumentError, "Missing the required parameter 'item_price' when calling DealsApi.deals_id_products_post"
      end
      # verify the required parameter 'quantity' is set
      if @api_client.config.client_side_validation && quantity.nil?
        fail ArgumentError, "Missing the required parameter 'quantity' when calling DealsApi.deals_id_products_post"
      end
      # resource path
      local_var_path = "/deals/{id}/products".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}
      form_params["product_id"] = product_id
      form_params["item_price"] = item_price
      form_params["quantity"] = quantity
      form_params["discount_percentage"] = opts[:'discount_percentage'] if !opts[:'discount_percentage'].nil?
      form_params["duration"] = opts[:'duration'] if !opts[:'duration'].nil?
      form_params["product_variation_id"] = opts[:'product_variation_id'] if !opts[:'product_variation_id'].nil?
      form_params["comments"] = opts[:'comments'] if !opts[:'comments'].nil?
      form_params["enabled_flag"] = opts[:'enabled_flag'] if !opts[:'enabled_flag'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#deals_id_products_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an attached product from a deal
    # Deletes a product attachment from a deal, using the product_attachment_id.
    # @param id ID of the deal
    # @param product_attachment_id Product attachment ID. This is returned as product_attachment_id after attaching a product to a deal or as id when listing the products attached to a deal.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def deals_id_products_product_attachment_id_delete(id, product_attachment_id, opts = {})
      deals_id_products_product_attachment_id_delete_with_http_info(id, product_attachment_id, opts)
      return nil
    end

    # Delete an attached product from a deal
    # Deletes a product attachment from a deal, using the product_attachment_id.
    # @param id ID of the deal
    # @param product_attachment_id Product attachment ID. This is returned as product_attachment_id after attaching a product to a deal or as id when listing the products attached to a deal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def deals_id_products_product_attachment_id_delete_with_http_info(id, product_attachment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DealsApi.deals_id_products_product_attachment_id_delete ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DealsApi.deals_id_products_product_attachment_id_delete"
      end
      # verify the required parameter 'product_attachment_id' is set
      if @api_client.config.client_side_validation && product_attachment_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_attachment_id' when calling DealsApi.deals_id_products_product_attachment_id_delete"
      end
      # resource path
      local_var_path = "/deals/{id}/products/{product_attachment_id}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'product_attachment_id' + '}', product_attachment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#deals_id_products_product_attachment_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a deal
    # Updates the properties of a deal.
    # @param id ID of the deal
    # @param [Hash] opts the optional parameters
    # @option opts [String] :title Deal title (default to )
    # @option opts [String] :value Value of the deal (default to )
    # @option opts [String] :currency Currency of the deal. Accepts a 3-character currency code (default to )
    # @option opts [Float] :user_id ID of the user who will be marked as the owner of this deal
    # @option opts [Float] :person_id ID of the person this deal will be associated with
    # @option opts [Float] :org_id ID of the organization this deal will be associated with
    # @option opts [Float] :stage_id ID of the stage this deal will be placed in a pipeline (note that you can&#39;t supply the ID of the pipeline as this will be assigned automatically based on stage_id)
    # @option opts [String] :status open &#x3D; Open, won &#x3D; Won, lost &#x3D; Lost, deleted &#x3D; Deleted (default to )
    # @option opts [Float] :probability Deal success probability percentage. Used/shown only when deal_probability for the pipeline of the deal is enabled.
    # @option opts [String] :lost_reason Optional message about why the deal was lost (to be used when status&#x3D;lost) (default to )
    # @option opts [String] :visible_to Visibility of the deal. If omitted, visibility will not be changed.&lt;dl class&#x3D;\&quot;fields-list\&quot;&gt;&lt;dt&gt;1&lt;/dt&gt;&lt;dd&gt;Owner &amp;amp; followers (private)&lt;/dd&gt;&lt;dt&gt;3&lt;/dt&gt;&lt;dd&gt;Entire company (shared)&lt;/dd&gt;&lt;/dl&gt; (default to )
    # @return [nil]
    def deals_id_put(id, opts = {})
      deals_id_put_with_http_info(id, opts)
      return nil
    end

    # Update a deal
    # Updates the properties of a deal.
    # @param id ID of the deal
    # @param [Hash] opts the optional parameters
    # @option opts [String] :title Deal title
    # @option opts [String] :value Value of the deal
    # @option opts [String] :currency Currency of the deal. Accepts a 3-character currency code
    # @option opts [Float] :user_id ID of the user who will be marked as the owner of this deal
    # @option opts [Float] :person_id ID of the person this deal will be associated with
    # @option opts [Float] :org_id ID of the organization this deal will be associated with
    # @option opts [Float] :stage_id ID of the stage this deal will be placed in a pipeline (note that you can&#39;t supply the ID of the pipeline as this will be assigned automatically based on stage_id)
    # @option opts [String] :status open &#x3D; Open, won &#x3D; Won, lost &#x3D; Lost, deleted &#x3D; Deleted
    # @option opts [Float] :probability Deal success probability percentage. Used/shown only when deal_probability for the pipeline of the deal is enabled.
    # @option opts [String] :lost_reason Optional message about why the deal was lost (to be used when status&#x3D;lost)
    # @option opts [String] :visible_to Visibility of the deal. If omitted, visibility will not be changed.&lt;dl class&#x3D;\&quot;fields-list\&quot;&gt;&lt;dt&gt;1&lt;/dt&gt;&lt;dd&gt;Owner &amp;amp; followers (private)&lt;/dd&gt;&lt;dt&gt;3&lt;/dt&gt;&lt;dd&gt;Entire company (shared)&lt;/dd&gt;&lt;/dl&gt;
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def deals_id_put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DealsApi.deals_id_put ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DealsApi.deals_id_put"
      end
      # resource path
      local_var_path = "/deals/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}
      form_params["title"] = opts[:'title'] if !opts[:'title'].nil?
      form_params["value"] = opts[:'value'] if !opts[:'value'].nil?
      form_params["currency"] = opts[:'currency'] if !opts[:'currency'].nil?
      form_params["user_id"] = opts[:'user_id'] if !opts[:'user_id'].nil?
      form_params["person_id"] = opts[:'person_id'] if !opts[:'person_id'].nil?
      form_params["org_id"] = opts[:'org_id'] if !opts[:'org_id'].nil?
      form_params["stage_id"] = opts[:'stage_id'] if !opts[:'stage_id'].nil?
      form_params["status"] = opts[:'status'] if !opts[:'status'].nil?
      form_params["probability"] = opts[:'probability'] if !opts[:'probability'].nil?
      form_params["lost_reason"] = opts[:'lost_reason'] if !opts[:'lost_reason'].nil?
      form_params["visible_to"] = opts[:'visible_to'] if !opts[:'visible_to'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#deals_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a deal
    # Adds a new deal. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys. To determine which custom fields exists, fetch the dealFields and look for 'key' values.
    # @param title Deal title
    # @param [Hash] opts the optional parameters
    # @option opts [String] :value Value of the deal. If omitted, value will be set to 0. (default to )
    # @option opts [String] :currency Currency of the deal. Accepts a 3-character currency code. If omitted, currency will be set to the default currency of the authorized user. (default to )
    # @option opts [Float] :user_id ID of the user who will be marked as the owner of this deal. If omitted, the authorized user ID will be used.
    # @option opts [Float] :person_id ID of the person this deal will be associated with
    # @option opts [Float] :org_id ID of the organization this deal will be associated with
    # @option opts [Float] :stage_id ID of the stage this deal will be placed in a pipeline (note that you can&#39;t supply the ID of the pipeline as this will be assigned automatically based on stage_id). If omitted, the deal will be placed in the first stage of the default pipeline.
    # @option opts [String] :status open &#x3D; Open, won &#x3D; Won, lost &#x3D; Lost, deleted &#x3D; Deleted. If omitted, status will be set to open. (default to )
    # @option opts [Float] :probability Deal success probability percentage. Used/shown only when deal_probability for the pipeline of the deal is enabled.
    # @option opts [String] :lost_reason Optional message about why the deal was lost (to be used when status&#x3D;lost) (default to )
    # @option opts [String] :add_time Optional creation date &amp; time of the deal in UTC. Requires admin user API token. Format: YYYY-MM-DD HH:MM:SS (default to )
    # @option opts [String] :visible_to Visibility of the deal. If omitted, visibility will be set to the default visibility setting of this item type for the authorized user.&lt;dl class&#x3D;\&quot;fields-list\&quot;&gt;&lt;dt&gt;1&lt;/dt&gt;&lt;dd&gt;Owner &amp;amp; followers (private)&lt;/dd&gt;&lt;dt&gt;3&lt;/dt&gt;&lt;dd&gt;Entire company (shared)&lt;/dd&gt;&lt;/dl&gt; (default to )
    # @return [nil]
    def deals_post(title, opts = {})
      deals_post_with_http_info(title, opts)
      return nil
    end

    # Add a deal
    # Adds a new deal. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys. To determine which custom fields exists, fetch the dealFields and look for &#39;key&#39; values.
    # @param title Deal title
    # @param [Hash] opts the optional parameters
    # @option opts [String] :value Value of the deal. If omitted, value will be set to 0.
    # @option opts [String] :currency Currency of the deal. Accepts a 3-character currency code. If omitted, currency will be set to the default currency of the authorized user.
    # @option opts [Float] :user_id ID of the user who will be marked as the owner of this deal. If omitted, the authorized user ID will be used.
    # @option opts [Float] :person_id ID of the person this deal will be associated with
    # @option opts [Float] :org_id ID of the organization this deal will be associated with
    # @option opts [Float] :stage_id ID of the stage this deal will be placed in a pipeline (note that you can&#39;t supply the ID of the pipeline as this will be assigned automatically based on stage_id). If omitted, the deal will be placed in the first stage of the default pipeline.
    # @option opts [String] :status open &#x3D; Open, won &#x3D; Won, lost &#x3D; Lost, deleted &#x3D; Deleted. If omitted, status will be set to open.
    # @option opts [Float] :probability Deal success probability percentage. Used/shown only when deal_probability for the pipeline of the deal is enabled.
    # @option opts [String] :lost_reason Optional message about why the deal was lost (to be used when status&#x3D;lost)
    # @option opts [String] :add_time Optional creation date &amp; time of the deal in UTC. Requires admin user API token. Format: YYYY-MM-DD HH:MM:SS
    # @option opts [String] :visible_to Visibility of the deal. If omitted, visibility will be set to the default visibility setting of this item type for the authorized user.&lt;dl class&#x3D;\&quot;fields-list\&quot;&gt;&lt;dt&gt;1&lt;/dt&gt;&lt;dd&gt;Owner &amp;amp; followers (private)&lt;/dd&gt;&lt;dt&gt;3&lt;/dt&gt;&lt;dd&gt;Entire company (shared)&lt;/dd&gt;&lt;/dl&gt;
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def deals_post_with_http_info(title, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DealsApi.deals_post ..."
      end
      # verify the required parameter 'title' is set
      if @api_client.config.client_side_validation && title.nil?
        fail ArgumentError, "Missing the required parameter 'title' when calling DealsApi.deals_post"
      end
      # resource path
      local_var_path = "/deals"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}
      form_params["title"] = title
      form_params["value"] = opts[:'value'] if !opts[:'value'].nil?
      form_params["currency"] = opts[:'currency'] if !opts[:'currency'].nil?
      form_params["user_id"] = opts[:'user_id'] if !opts[:'user_id'].nil?
      form_params["person_id"] = opts[:'person_id'] if !opts[:'person_id'].nil?
      form_params["org_id"] = opts[:'org_id'] if !opts[:'org_id'].nil?
      form_params["stage_id"] = opts[:'stage_id'] if !opts[:'stage_id'].nil?
      form_params["status"] = opts[:'status'] if !opts[:'status'].nil?
      form_params["probability"] = opts[:'probability'] if !opts[:'probability'].nil?
      form_params["lost_reason"] = opts[:'lost_reason'] if !opts[:'lost_reason'].nil?
      form_params["add_time"] = opts[:'add_time'] if !opts[:'add_time'].nil?
      form_params["visible_to"] = opts[:'visible_to'] if !opts[:'visible_to'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#deals_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get deals timeline
    # Returns open and won deals, grouped by defined interval of time set in a date-type dealField (field_key) — e.g. when month is the chosen interval, and 3 months are asked starting from  January 1st, 2012, deals are returned grouped into 3 groups — January, February and March — based on the value of the given field_key.
    # @param start_date Date where first interval starts. Format: YYYY-MM-DD
    # @param interval Type of interval.&lt;dl class&#x3D;\&quot;fields-list\&quot;&gt;&lt;dt&gt;day&lt;/dt&gt;&lt;dd&gt;Day&lt;/dd&gt;&lt;dt&gt;week&lt;/dt&gt;&lt;dd&gt;A full week (7 days) starting from start_date&lt;/dd&gt;&lt;dt&gt;month&lt;/dt&gt;&lt;dd&gt;A full month (depending on the number of days in given month) starting from start_date&lt;/dd&gt;&lt;dt&gt;quarter&lt;/dt&gt;&lt;dd&gt;A full quarter (3 months) starting from start_date&lt;/dd&gt;&lt;/dl&gt;
    # @param amount Number of given intervals, starting from start_date, to fetch. E.g. 3 (months).
    # @param field_key The name of the date field by which to get deals by.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :user_id If supplied, only deals matching the given user will be returned.
    # @option opts [Float] :pipeline_id If supplied, only deals matching the given pipeline will be returned.
    # @option opts [Float] :filter_id If supplied, only deals matching the given filter will be returned.
    # @option opts [String] :exclude_deals Whether to exclude deals list (1) or not (0). Note that when deals are excluded, the timeline summary (counts and values) is still returned. (default to )
    # @option opts [String] :totals_convert_currency 3-letter currency code of any of the supported currencies. When supplied, totals_converted is returned per each interval which contains the currency-converted total amounts in the given currency. You may also set this parameter to &#39;default_currency&#39; in which case users default currency is used. (default to )
    # @return [nil]
    def deals_timeline_get(start_date, interval, amount, field_key, opts = {})
      deals_timeline_get_with_http_info(start_date, interval, amount, field_key, opts)
      return nil
    end

    # Get deals timeline
    # Returns open and won deals, grouped by defined interval of time set in a date-type dealField (field_key) — e.g. when month is the chosen interval, and 3 months are asked starting from  January 1st, 2012, deals are returned grouped into 3 groups — January, February and March — based on the value of the given field_key.
    # @param start_date Date where first interval starts. Format: YYYY-MM-DD
    # @param interval Type of interval.&lt;dl class&#x3D;\&quot;fields-list\&quot;&gt;&lt;dt&gt;day&lt;/dt&gt;&lt;dd&gt;Day&lt;/dd&gt;&lt;dt&gt;week&lt;/dt&gt;&lt;dd&gt;A full week (7 days) starting from start_date&lt;/dd&gt;&lt;dt&gt;month&lt;/dt&gt;&lt;dd&gt;A full month (depending on the number of days in given month) starting from start_date&lt;/dd&gt;&lt;dt&gt;quarter&lt;/dt&gt;&lt;dd&gt;A full quarter (3 months) starting from start_date&lt;/dd&gt;&lt;/dl&gt;
    # @param amount Number of given intervals, starting from start_date, to fetch. E.g. 3 (months).
    # @param field_key The name of the date field by which to get deals by.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :user_id If supplied, only deals matching the given user will be returned.
    # @option opts [Float] :pipeline_id If supplied, only deals matching the given pipeline will be returned.
    # @option opts [Float] :filter_id If supplied, only deals matching the given filter will be returned.
    # @option opts [String] :exclude_deals Whether to exclude deals list (1) or not (0). Note that when deals are excluded, the timeline summary (counts and values) is still returned.
    # @option opts [String] :totals_convert_currency 3-letter currency code of any of the supported currencies. When supplied, totals_converted is returned per each interval which contains the currency-converted total amounts in the given currency. You may also set this parameter to &#39;default_currency&#39; in which case users default currency is used.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def deals_timeline_get_with_http_info(start_date, interval, amount, field_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DealsApi.deals_timeline_get ..."
      end
      # verify the required parameter 'start_date' is set
      if @api_client.config.client_side_validation && start_date.nil?
        fail ArgumentError, "Missing the required parameter 'start_date' when calling DealsApi.deals_timeline_get"
      end
      # verify the required parameter 'interval' is set
      if @api_client.config.client_side_validation && interval.nil?
        fail ArgumentError, "Missing the required parameter 'interval' when calling DealsApi.deals_timeline_get"
      end
      # verify the required parameter 'amount' is set
      if @api_client.config.client_side_validation && amount.nil?
        fail ArgumentError, "Missing the required parameter 'amount' when calling DealsApi.deals_timeline_get"
      end
      # verify the required parameter 'field_key' is set
      if @api_client.config.client_side_validation && field_key.nil?
        fail ArgumentError, "Missing the required parameter 'field_key' when calling DealsApi.deals_timeline_get"
      end
      # resource path
      local_var_path = "/deals/timeline"

      # query parameters
      query_params = {}
      query_params[:'start_date'] = start_date
      query_params[:'interval'] = interval
      query_params[:'amount'] = amount
      query_params[:'field_key'] = field_key
      query_params[:'user_id'] = opts[:'user_id'] if !opts[:'user_id'].nil?
      query_params[:'pipeline_id'] = opts[:'pipeline_id'] if !opts[:'pipeline_id'].nil?
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'exclude_deals'] = opts[:'exclude_deals'] if !opts[:'exclude_deals'].nil?
      query_params[:'totals_convert_currency'] = opts[:'totals_convert_currency'] if !opts[:'totals_convert_currency'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#deals_timeline_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
