=begin
#Pipedrive API v1

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module Pipedrive
  class FiltersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Delete multiple filters in bulk
    # Marks multiple filters as deleted.
    # @param ids Comma-separated filter IDs to delete
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def filters_delete(ids, opts = {})
      filters_delete_with_http_info(ids, opts)
      return nil
    end

    # Delete multiple filters in bulk
    # Marks multiple filters as deleted.
    # @param ids Comma-separated filter IDs to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def filters_delete_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FiltersApi.filters_delete ..."
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling FiltersApi.filters_delete"
      end
      # resource path
      local_var_path = "/filters"

      # query parameters
      query_params = {}
      query_params[:'ids'] = ids

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FiltersApi#filters_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all filters
    # Returns data about all filters
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type Type of filters to fetch. (default to )
    # @return [nil]
    def filters_get(opts = {})
      filters_get_with_http_info(opts)
      return nil
    end

    # Get all filters
    # Returns data about all filters
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type Type of filters to fetch.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def filters_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FiltersApi.filters_get ..."
      end
      # resource path
      local_var_path = "/filters"

      # query parameters
      query_params = {}
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FiltersApi#filters_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a filter
    # Marks a filter as deleted.
    # @param id ID of the filter to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def filters_id_delete(id, opts = {})
      filters_id_delete_with_http_info(id, opts)
      return nil
    end

    # Delete a filter
    # Marks a filter as deleted.
    # @param id ID of the filter to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def filters_id_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FiltersApi.filters_id_delete ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FiltersApi.filters_id_delete"
      end
      # resource path
      local_var_path = "/filters/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FiltersApi#filters_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get one filter
    # Returns data about a specific filter. Note that this also returns the condition lines of the filter.
    # @param id ID of the filter to fetch.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def filters_id_get(id, opts = {})
      filters_id_get_with_http_info(id, opts)
      return nil
    end

    # Get one filter
    # Returns data about a specific filter. Note that this also returns the condition lines of the filter.
    # @param id ID of the filter to fetch.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def filters_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FiltersApi.filters_id_get ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FiltersApi.filters_id_get"
      end
      # resource path
      local_var_path = "/filters/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FiltersApi#filters_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update filter
    # Updates existing filter.
    # @param id ID of the filter to update.
    # @param conditions Filter conditions as a JSON object. It requires a minimum structure as follows: {\&quot;glue\&quot;:\&quot;and\&quot;,\&quot;conditions\&quot;:[{\&quot;glue\&quot;:\&quot;and\&quot;,\&quot;conditions\&quot;: [CONDITION_OBJECTS]},{\&quot;glue\&quot;:\&quot;or\&quot;,\&quot;conditions\&quot;:[CONDITION_OBJECTS]}]}. Replace CONDITION_OBJECTS with JSON objects of the following structure: {\&quot;object\&quot;:\&quot;\&quot;,\&quot;field_id\&quot;:\&quot;\&quot;, \&quot;operator\&quot;:\&quot;\&quot;,\&quot;value\&quot;:\&quot;\&quot;, \&quot;extra_value\&quot;:\&quot;\&quot;} or leave the array empty. Depending on the object type you should use another API endpoint to get field_id. There are five types of objects you can choose from: \&quot;person\&quot;, \&quot;deal\&quot;, \&quot;organization\&quot;, \&quot;product\&quot;, \&quot;activity\&quot; and you can use these types of operators depending on what type of a field you have: \&quot;IS NOT NULL\&quot;, \&quot;IS NULL\&quot;, \&quot;&lt;&#x3D;\&quot;, \&quot;&gt;&#x3D;\&quot;, \&quot;&lt;\&quot;, \&quot;&gt;\&quot;, \&quot;!&#x3D;\&quot;, \&quot;&#x3D;\&quot;, \&quot;LIKE &#39;%$%&#39;\&quot;, \&quot;NOT LIKE &#39;%$%&#39;\&quot;, \&quot;LIKE &#39;$%&#39;\&quot;, \&quot;NOT LIKE &#39;$%&#39;\&quot;, \&quot;LIKE &#39;%$&#39;\&quot;, \&quot;NOT LIKE &#39;%$&#39;\&quot;. To get a better understanding of how filters work try creating them directly from the Pipedrive application.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Filter name (default to )
    # @return [nil]
    def filters_id_put(id, conditions, opts = {})
      filters_id_put_with_http_info(id, conditions, opts)
      return nil
    end

    # Update filter
    # Updates existing filter.
    # @param id ID of the filter to update.
    # @param conditions Filter conditions as a JSON object. It requires a minimum structure as follows: {\&quot;glue\&quot;:\&quot;and\&quot;,\&quot;conditions\&quot;:[{\&quot;glue\&quot;:\&quot;and\&quot;,\&quot;conditions\&quot;: [CONDITION_OBJECTS]},{\&quot;glue\&quot;:\&quot;or\&quot;,\&quot;conditions\&quot;:[CONDITION_OBJECTS]}]}. Replace CONDITION_OBJECTS with JSON objects of the following structure: {\&quot;object\&quot;:\&quot;\&quot;,\&quot;field_id\&quot;:\&quot;\&quot;, \&quot;operator\&quot;:\&quot;\&quot;,\&quot;value\&quot;:\&quot;\&quot;, \&quot;extra_value\&quot;:\&quot;\&quot;} or leave the array empty. Depending on the object type you should use another API endpoint to get field_id. There are five types of objects you can choose from: \&quot;person\&quot;, \&quot;deal\&quot;, \&quot;organization\&quot;, \&quot;product\&quot;, \&quot;activity\&quot; and you can use these types of operators depending on what type of a field you have: \&quot;IS NOT NULL\&quot;, \&quot;IS NULL\&quot;, \&quot;&lt;&#x3D;\&quot;, \&quot;&gt;&#x3D;\&quot;, \&quot;&lt;\&quot;, \&quot;&gt;\&quot;, \&quot;!&#x3D;\&quot;, \&quot;&#x3D;\&quot;, \&quot;LIKE &#39;%$%&#39;\&quot;, \&quot;NOT LIKE &#39;%$%&#39;\&quot;, \&quot;LIKE &#39;$%&#39;\&quot;, \&quot;NOT LIKE &#39;$%&#39;\&quot;, \&quot;LIKE &#39;%$&#39;\&quot;, \&quot;NOT LIKE &#39;%$&#39;\&quot;. To get a better understanding of how filters work try creating them directly from the Pipedrive application.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Filter name
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def filters_id_put_with_http_info(id, conditions, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FiltersApi.filters_id_put ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FiltersApi.filters_id_put"
      end
      # verify the required parameter 'conditions' is set
      if @api_client.config.client_side_validation && conditions.nil?
        fail ArgumentError, "Missing the required parameter 'conditions' when calling FiltersApi.filters_id_put"
      end
      # resource path
      local_var_path = "/filters/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}
      form_params["name"] = opts[:'name'] if !opts[:'name'].nil?

      # http body (model)
      post_body = @api_client.object_to_http_body(conditions)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FiltersApi#filters_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a new filter
    # Adds a new filter, returns the ID upon success. Note that in the conditions json object only one first-level condition group is supported, and it must be glued with 'AND', and only two second level condition groups are supported of which one must be glued with 'AND' and the second with 'OR'. Other combinations do not work (yet) but the syntax supports introducing them in future.
    # @param name Filter name
    # @param conditions Filter conditions as a JSON object. It requires a minimum structure as follows: {\&quot;glue\&quot;:\&quot;and\&quot;,\&quot;conditions\&quot;:[{\&quot;glue\&quot;:\&quot;and\&quot;,\&quot;conditions\&quot;: [CONDITION_OBJECTS]},{\&quot;glue\&quot;:\&quot;or\&quot;,\&quot;conditions\&quot;:[CONDITION_OBJECTS]}]}. Replace CONDITION_OBJECTS with JSON objects of the following structure: {\&quot;object\&quot;:\&quot;\&quot;,\&quot;field_id\&quot;:\&quot;\&quot;, \&quot;operator\&quot;:\&quot;\&quot;,\&quot;value\&quot;:\&quot;\&quot;, \&quot;extra_value\&quot;:\&quot;\&quot;} or leave the array empty. Depending on the object type you should use another API endpoint to get field_id. There are five types of objects you can choose from: \&quot;person\&quot;, \&quot;deal\&quot;, \&quot;organization\&quot;, \&quot;product\&quot;, \&quot;activity\&quot; and you can use these types of operators depending on what type of a field you have: \&quot;IS NOT NULL\&quot;, \&quot;IS NULL\&quot;, \&quot;&lt;&#x3D;\&quot;, \&quot;&gt;&#x3D;\&quot;, \&quot;&lt;\&quot;, \&quot;&gt;\&quot;, \&quot;!&#x3D;\&quot;, \&quot;&#x3D;\&quot;, \&quot;LIKE &#39;%$%&#39;\&quot;, \&quot;NOT LIKE &#39;%$%&#39;\&quot;, \&quot;LIKE &#39;$%&#39;\&quot;, \&quot;NOT LIKE &#39;$%&#39;\&quot;, \&quot;LIKE &#39;%$&#39;\&quot;, \&quot;NOT LIKE &#39;%$&#39;\&quot;. To get a better understanding of how filters work try creating them directly from the Pipedrive application.
    # @param type Type of filter to create.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def filters_post(name, conditions, type, opts = {})
      filters_post_with_http_info(name, conditions, type, opts)
      return nil
    end

    # Add a new filter
    # Adds a new filter, returns the ID upon success. Note that in the conditions json object only one first-level condition group is supported, and it must be glued with &#39;AND&#39;, and only two second level condition groups are supported of which one must be glued with &#39;AND&#39; and the second with &#39;OR&#39;. Other combinations do not work (yet) but the syntax supports introducing them in future.
    # @param name Filter name
    # @param conditions Filter conditions as a JSON object. It requires a minimum structure as follows: {\&quot;glue\&quot;:\&quot;and\&quot;,\&quot;conditions\&quot;:[{\&quot;glue\&quot;:\&quot;and\&quot;,\&quot;conditions\&quot;: [CONDITION_OBJECTS]},{\&quot;glue\&quot;:\&quot;or\&quot;,\&quot;conditions\&quot;:[CONDITION_OBJECTS]}]}. Replace CONDITION_OBJECTS with JSON objects of the following structure: {\&quot;object\&quot;:\&quot;\&quot;,\&quot;field_id\&quot;:\&quot;\&quot;, \&quot;operator\&quot;:\&quot;\&quot;,\&quot;value\&quot;:\&quot;\&quot;, \&quot;extra_value\&quot;:\&quot;\&quot;} or leave the array empty. Depending on the object type you should use another API endpoint to get field_id. There are five types of objects you can choose from: \&quot;person\&quot;, \&quot;deal\&quot;, \&quot;organization\&quot;, \&quot;product\&quot;, \&quot;activity\&quot; and you can use these types of operators depending on what type of a field you have: \&quot;IS NOT NULL\&quot;, \&quot;IS NULL\&quot;, \&quot;&lt;&#x3D;\&quot;, \&quot;&gt;&#x3D;\&quot;, \&quot;&lt;\&quot;, \&quot;&gt;\&quot;, \&quot;!&#x3D;\&quot;, \&quot;&#x3D;\&quot;, \&quot;LIKE &#39;%$%&#39;\&quot;, \&quot;NOT LIKE &#39;%$%&#39;\&quot;, \&quot;LIKE &#39;$%&#39;\&quot;, \&quot;NOT LIKE &#39;$%&#39;\&quot;, \&quot;LIKE &#39;%$&#39;\&quot;, \&quot;NOT LIKE &#39;%$&#39;\&quot;. To get a better understanding of how filters work try creating them directly from the Pipedrive application.
    # @param type Type of filter to create.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def filters_post_with_http_info(name, conditions, type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FiltersApi.filters_post ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling FiltersApi.filters_post"
      end
      # verify the required parameter 'conditions' is set
      if @api_client.config.client_side_validation && conditions.nil?
        fail ArgumentError, "Missing the required parameter 'conditions' when calling FiltersApi.filters_post"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling FiltersApi.filters_post"
      end
      # resource path
      local_var_path = "/filters"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}
      form_params["name"] = name
      form_params["type"] = type

      # http body (model)
      post_body = @api_client.object_to_http_body(conditions)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FiltersApi#filters_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
