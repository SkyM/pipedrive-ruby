=begin
#Pipedrive API v1

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module Pipedrive
  class RolesApi
    attr_accessor :api_client

    def initialize(api_client = Client.default)
      @api_client = api_client
    end

    # Get all roles
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :start Pagination start (default to 0)
    # @option opts [Float] :limit Items shown per page
    # @return [nil]
    def roles_get(opts = {})
      roles_get_with_http_info(opts)
      end

    # Get all roles
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :start Pagination start
    # @option opts [Float] :limit Items shown per page
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def roles_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RolesApi.roles_get ..."
      end
      # resource path
      local_var_path = "/roles"

      # query parameters
      query_params = {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = [ 'access_token' ]
      response = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#roles_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return response
    end

    # Delete a role assignment
    # Delete assignment from a role
    # @param id ID of the role
    # @param user_id ID of the user
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def roles_id_assignments_delete(id, user_id, opts = {})
      roles_id_assignments_delete_with_http_info(id, user_id, opts)
      end

    # Delete a role assignment
    # Delete assignment from a role
    # @param id ID of the role
    # @param user_id ID of the user
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def roles_id_assignments_delete_with_http_info(id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RolesApi.roles_id_assignments_delete ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RolesApi.roles_id_assignments_delete"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling RolesApi.roles_id_assignments_delete"
      end
      # resource path
      local_var_path = "/roles/{id}/assignments".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'user_id'] = user_id

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = [ 'access_token' ]
      response = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#roles_id_assignments_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return response
    end

    # List role assignments
    # List assignments for a role
    # @param id ID of the role
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :start Pagination start (default to 0)
    # @option opts [Float] :limit Items shown per page
    # @return [nil]
    def roles_id_assignments_get(id, opts = {})
      roles_id_assignments_get_with_http_info(id, opts)
      end

    # List role assignments
    # List assignments for a role
    # @param id ID of the role
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :start Pagination start
    # @option opts [Float] :limit Items shown per page
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def roles_id_assignments_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RolesApi.roles_id_assignments_get ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RolesApi.roles_id_assignments_get"
      end
      # resource path
      local_var_path = "/roles/{id}/assignments".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = [ 'access_token' ]
      response = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#roles_id_assignments_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return response
    end

    # Add role assignment
    # Add assignment for a role
    # @param id ID of the role
    # @param user_id ID of the user
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def roles_id_assignments_post(id, user_id, opts = {})
      roles_id_assignments_post_with_http_info(id, user_id, opts)
      end

    # Add role assignment
    # Add assignment for a role
    # @param id ID of the role
    # @param user_id ID of the user
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def roles_id_assignments_post_with_http_info(id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RolesApi.roles_id_assignments_post ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RolesApi.roles_id_assignments_post"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling RolesApi.roles_id_assignments_post"
      end
      # resource path
      local_var_path = "/roles/{id}/assignments".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}
      form_params["user_id"] = user_id

      # http body (model)
      post_body = nil
      auth_names = [ 'access_token' ]
      response = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#roles_id_assignments_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return response
    end

    # Delete a role
    # 
    # @param id ID of the role
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def roles_id_delete(id, opts = {})
      roles_id_delete_with_http_info(id, opts)
      end

    # Delete a role
    # 
    # @param id ID of the role
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def roles_id_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RolesApi.roles_id_delete ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RolesApi.roles_id_delete"
      end
      # resource path
      local_var_path = "/roles/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = [ 'access_token' ]
      response = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#roles_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return response
    end

    # Get one role
    # 
    # @param id ID of the role
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def roles_id_get(id, opts = {})
      roles_id_get_with_http_info(id, opts)
      end

    # Get one role
    # 
    # @param id ID of the role
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def roles_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RolesApi.roles_id_get ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RolesApi.roles_id_get"
      end
      # resource path
      local_var_path = "/roles/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = [ 'access_token' ]
      response = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#roles_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return response
    end

    # Update role details
    # 
    # @param id ID of the role
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :parent_role_id 
    # @option opts [String] :name  (default to )
    # @return [nil]
    def roles_id_put(id, opts = {})
      roles_id_put_with_http_info(id, opts)
      end

    # Update role details
    # 
    # @param id ID of the role
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :parent_role_id 
    # @option opts [String] :name 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def roles_id_put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RolesApi.roles_id_put ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RolesApi.roles_id_put"
      end
      # resource path
      local_var_path = "/roles/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}
      form_params["parent_role_id"] = opts[:'parent_role_id'] if !opts[:'parent_role_id'].nil?
      form_params["name"] = opts[:'name'] if !opts[:'name'].nil?

      # http body (model)
      post_body = nil
      auth_names = [ 'access_token' ]
      response = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#roles_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return response
    end

    # List role sub-roles
    # 
    # @param id ID of the role
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :start Pagination start (default to 0)
    # @option opts [Float] :limit Items shown per page
    # @return [nil]
    def roles_id_roles_get(id, opts = {})
      roles_id_roles_get_with_http_info(id, opts)
      end

    # List role sub-roles
    # 
    # @param id ID of the role
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :start Pagination start
    # @option opts [Float] :limit Items shown per page
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def roles_id_roles_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RolesApi.roles_id_roles_get ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RolesApi.roles_id_roles_get"
      end
      # resource path
      local_var_path = "/roles/{id}/roles".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = [ 'access_token' ]
      response = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#roles_id_roles_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return response
    end

    # List role settings
    # 
    # @param id ID of the role
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def roles_id_settings_get(id, opts = {})
      roles_id_settings_get_with_http_info(id, opts)
      end

    # List role settings
    # 
    # @param id ID of the role
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def roles_id_settings_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RolesApi.roles_id_settings_get ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RolesApi.roles_id_settings_get"
      end
      # resource path
      local_var_path = "/roles/{id}/settings".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = [ 'access_token' ]
      response = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#roles_id_settings_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return response
    end

    # Add or update role setting
    # 
    # @param id ID of the role
    # @param setting_key 
    # @param value Possible values for default_visibility settings: 0...1; for access_level settings: 1...7
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def roles_id_settings_post(id, setting_key, value, opts = {})
      roles_id_settings_post_with_http_info(id, setting_key, value, opts)
      end

    # Add or update role setting
    # 
    # @param id ID of the role
    # @param setting_key 
    # @param value Possible values for default_visibility settings: 0...1; for access_level settings: 1...7
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def roles_id_settings_post_with_http_info(id, setting_key, value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RolesApi.roles_id_settings_post ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RolesApi.roles_id_settings_post"
      end
      # verify the required parameter 'setting_key' is set
      if @api_client.config.client_side_validation && setting_key.nil?
        fail ArgumentError, "Missing the required parameter 'setting_key' when calling RolesApi.roles_id_settings_post"
      end
      # verify the required parameter 'value' is set
      if @api_client.config.client_side_validation && value.nil?
        fail ArgumentError, "Missing the required parameter 'value' when calling RolesApi.roles_id_settings_post"
      end
      # resource path
      local_var_path = "/roles/{id}/settings".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}
      form_params["setting_key"] = setting_key
      form_params["value"] = value

      # http body (model)
      post_body = nil
      auth_names = [ 'access_token' ]
      response = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#roles_id_settings_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return response
    end

    # Add a role
    # 
    # @param name 
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :parent_role_id 
    # @return [nil]
    def roles_post(name, opts = {})
      roles_post_with_http_info(name, opts)
      end

    # Add a role
    # 
    # @param name 
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :parent_role_id 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def roles_post_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RolesApi.roles_post ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling RolesApi.roles_post"
      end
      # resource path
      local_var_path = "/roles"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}
      form_params["name"] = name
      form_params["parent_role_id"] = opts[:'parent_role_id'] if !opts[:'parent_role_id'].nil?

      # http body (model)
      post_body = nil
      auth_names = [ 'access_token' ]
      response = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#roles_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return response
    end
  end
end
