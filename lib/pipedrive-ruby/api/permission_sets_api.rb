=begin
#Pipedrive API v1

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module Pipedrive
  class PermissionSetsApi
    attr_accessor :api_client

    def initialize(api_client = Client.default)
      @api_client = api_client
    end

    # Get all permission sets
    # 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def permission_sets_get(opts = {})
      permission_sets_get_with_http_info(opts)
      end

    # Get all permission sets
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def permission_sets_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PermissionSetsApi.permission_sets_get ..."
      end
      # resource path
      local_var_path = "/permissionSets"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = [ 'access_token' ]
      response = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PermissionSetsApi#permission_sets_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return response
    end

    # Delete a permission set assignment
    # Delete assignment from a permission set
    # @param id ID of the permission set
    # @param user_id ID of the user
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def permission_sets_id_assignments_delete(id, user_id, opts = {})
      permission_sets_id_assignments_delete_with_http_info(id, user_id, opts)
      end

    # Delete a permission set assignment
    # Delete assignment from a permission set
    # @param id ID of the permission set
    # @param user_id ID of the user
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def permission_sets_id_assignments_delete_with_http_info(id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PermissionSetsApi.permission_sets_id_assignments_delete ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PermissionSetsApi.permission_sets_id_assignments_delete"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling PermissionSetsApi.permission_sets_id_assignments_delete"
      end
      # resource path
      local_var_path = "/permissionSets/{id}/assignments".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'user_id'] = user_id

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = [ 'access_token' ]
      response = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PermissionSetsApi#permission_sets_id_assignments_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return response
    end

    # List permission set assignments
    # List assignments for a permission set
    # @param id ID of the permission set
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :start Pagination start (default to 0)
    # @option opts [Float] :limit Items shown per page
    # @return [nil]
    def permission_sets_id_assignments_get(id, opts = {})
      permission_sets_id_assignments_get_with_http_info(id, opts)
      end

    # List permission set assignments
    # List assignments for a permission set
    # @param id ID of the permission set
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :start Pagination start
    # @option opts [Float] :limit Items shown per page
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def permission_sets_id_assignments_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PermissionSetsApi.permission_sets_id_assignments_get ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PermissionSetsApi.permission_sets_id_assignments_get"
      end
      # resource path
      local_var_path = "/permissionSets/{id}/assignments".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = [ 'access_token' ]
      response = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PermissionSetsApi#permission_sets_id_assignments_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return response
    end

    # Add permission set assignment
    # Add assignment for a permission set
    # @param id ID of the permission set
    # @param user_id ID of the user
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def permission_sets_id_assignments_post(id, user_id, opts = {})
      permission_sets_id_assignments_post_with_http_info(id, user_id, opts)
      end

    # Add permission set assignment
    # Add assignment for a permission set
    # @param id ID of the permission set
    # @param user_id ID of the user
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def permission_sets_id_assignments_post_with_http_info(id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PermissionSetsApi.permission_sets_id_assignments_post ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PermissionSetsApi.permission_sets_id_assignments_post"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling PermissionSetsApi.permission_sets_id_assignments_post"
      end
      # resource path
      local_var_path = "/permissionSets/{id}/assignments".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}
      form_params["user_id"] = user_id

      # http body (model)
      post_body = nil
      auth_names = [ 'access_token' ]
      response = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PermissionSetsApi#permission_sets_id_assignments_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return response
    end

    # Get one permission set
    # 
    # @param id ID of the permission set
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def permission_sets_id_get(id, opts = {})
      permission_sets_id_get_with_http_info(id, opts)
      end

    # Get one permission set
    # 
    # @param id ID of the permission set
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def permission_sets_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PermissionSetsApi.permission_sets_id_get ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PermissionSetsApi.permission_sets_id_get"
      end
      # resource path
      local_var_path = "/permissionSets/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = [ 'access_token' ]
      response = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PermissionSetsApi#permission_sets_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return response
    end

    # Update permission set details
    # 
    # @param id ID of the permission set
    # @param contents Permissions that this set contains as JSON or ordinary comma separated string. Possible permission names are: can_change_visibility_of_items, can_see_company_wide_statistics, can_delete_deals, can_see_deals_list_summary, can_export_data_from_lists, can_see_other_users_statistics
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def permission_sets_id_put(id, contents, opts = {})
      permission_sets_id_put_with_http_info(id, contents, opts)
      end

    # Update permission set details
    # 
    # @param id ID of the permission set
    # @param contents Permissions that this set contains as JSON or ordinary comma separated string. Possible permission names are: can_change_visibility_of_items, can_see_company_wide_statistics, can_delete_deals, can_see_deals_list_summary, can_export_data_from_lists, can_see_other_users_statistics
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def permission_sets_id_put_with_http_info(id, contents, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PermissionSetsApi.permission_sets_id_put ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PermissionSetsApi.permission_sets_id_put"
      end
      # verify the required parameter 'contents' is set
      if @api_client.config.client_side_validation && contents.nil?
        fail ArgumentError, "Missing the required parameter 'contents' when calling PermissionSetsApi.permission_sets_id_put"
      end
      # resource path
      local_var_path = "/permissionSets/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(contents)
      auth_names = [ 'access_token' ]
      response = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PermissionSetsApi#permission_sets_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return response
    end
  end
end
