=begin
#Pipedrive API v1

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module Pipedrive
  class PersonsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Delete multiple persons in bulk
    # Marks multiple persons as deleted.
    # @param ids Comma-separated IDs that will be deleted
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def persons_delete(ids, opts = {})
      persons_delete_with_http_info(ids, opts)
      return nil
    end

    # Delete multiple persons in bulk
    # Marks multiple persons as deleted.
    # @param ids Comma-separated IDs that will be deleted
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def persons_delete_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PersonsApi.persons_delete ..."
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling PersonsApi.persons_delete"
      end
      # resource path
      local_var_path = "/persons"

      # query parameters
      query_params = {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :csv)

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonsApi#persons_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Find persons by name
    # Searches all persons by their name.
    # @param term Search term to look for
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :org_id ID of the organization person is associated with.
    # @option opts [Float] :start Pagination start (default to 0)
    # @option opts [Float] :limit Items shown per page
    # @option opts [String] :search_by_email When enabled, term will only be matched against email addresses of people. Default: false (default to )
    # @return [nil]
    def persons_find_get(term, opts = {})
      persons_find_get_with_http_info(term, opts)
      return nil
    end

    # Find persons by name
    # Searches all persons by their name.
    # @param term Search term to look for
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :org_id ID of the organization person is associated with.
    # @option opts [Float] :start Pagination start
    # @option opts [Float] :limit Items shown per page
    # @option opts [String] :search_by_email When enabled, term will only be matched against email addresses of people. Default: false
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def persons_find_get_with_http_info(term, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PersonsApi.persons_find_get ..."
      end
      # verify the required parameter 'term' is set
      if @api_client.config.client_side_validation && term.nil?
        fail ArgumentError, "Missing the required parameter 'term' when calling PersonsApi.persons_find_get"
      end
      # resource path
      local_var_path = "/persons/find"

      # query parameters
      query_params = {}
      query_params[:'term'] = term
      query_params[:'org_id'] = opts[:'org_id'] if !opts[:'org_id'].nil?
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'search_by_email'] = opts[:'search_by_email'] if !opts[:'search_by_email'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonsApi#persons_find_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all persons
    # Returns all persons
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :user_id If supplied, only persons owned by the given user will be returned.
    # @option opts [Float] :filter_id ID of the filter to use
    # @option opts [String] :first_char If supplied, only persons whose name starts with the specified letter will be returned (case insensitive). (default to )
    # @option opts [Float] :start Pagination start (default to 0)
    # @option opts [Float] :limit Items shown per page
    # @option opts [String] :sort Field names and sorting mode separated by comma (field_name_1 ASC, field_name_2 DESC). Only first-level field keys are supported (no nested keys). (default to )
    # @return [nil]
    def persons_get(opts = {})
      persons_get_with_http_info(opts)
      return nil
    end

    # Get all persons
    # Returns all persons
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :user_id If supplied, only persons owned by the given user will be returned.
    # @option opts [Float] :filter_id ID of the filter to use
    # @option opts [String] :first_char If supplied, only persons whose name starts with the specified letter will be returned (case insensitive).
    # @option opts [Float] :start Pagination start
    # @option opts [Float] :limit Items shown per page
    # @option opts [String] :sort Field names and sorting mode separated by comma (field_name_1 ASC, field_name_2 DESC). Only first-level field keys are supported (no nested keys).
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def persons_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PersonsApi.persons_get ..."
      end
      # resource path
      local_var_path = "/persons"

      # query parameters
      query_params = {}
      query_params[:'user_id'] = opts[:'user_id'] if !opts[:'user_id'].nil?
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'first_char'] = opts[:'first_char'] if !opts[:'first_char'].nil?
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonsApi#persons_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List activities associated with a person
    # Lists activities associated with a person.
    # @param id ID of the person
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :start Pagination start (default to 0)
    # @option opts [Float] :limit Items shown per page
    # @option opts [String] :done Whether to fetch done (1) or undone (0) activities. If omitted from request, both undone and done activities are fetched. (default to )
    # @option opts [String] :exclude A comma-separated string of activity IDs to exclude from result (default to )
    # @return [nil]
    def persons_id_activities_get(id, opts = {})
      persons_id_activities_get_with_http_info(id, opts)
      return nil
    end

    # List activities associated with a person
    # Lists activities associated with a person.
    # @param id ID of the person
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :start Pagination start
    # @option opts [Float] :limit Items shown per page
    # @option opts [String] :done Whether to fetch done (1) or undone (0) activities. If omitted from request, both undone and done activities are fetched.
    # @option opts [String] :exclude A comma-separated string of activity IDs to exclude from result
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def persons_id_activities_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PersonsApi.persons_id_activities_get ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PersonsApi.persons_id_activities_get"
      end
      # resource path
      local_var_path = "/persons/{id}/activities".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'done'] = opts[:'done'] if !opts[:'done'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonsApi#persons_id_activities_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List deals associated with a person
    # Lists deals associated with a person.
    # @param id ID of a person
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :start Pagination start (default to 0)
    # @option opts [Float] :limit Items shown per page
    # @option opts [String] :status Only fetch deals with specific status. If omitted, all not deleted deals are fetched. (default to all_not_deleted)
    # @option opts [String] :sort Field names and sorting mode separated by comma (field_name_1 ASC, field_name_2 DESC). Only first-level field keys are supported (no nested keys). (default to )
    # @return [nil]
    def persons_id_deals_get(id, opts = {})
      persons_id_deals_get_with_http_info(id, opts)
      return nil
    end

    # List deals associated with a person
    # Lists deals associated with a person.
    # @param id ID of a person
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :start Pagination start
    # @option opts [Float] :limit Items shown per page
    # @option opts [String] :status Only fetch deals with specific status. If omitted, all not deleted deals are fetched.
    # @option opts [String] :sort Field names and sorting mode separated by comma (field_name_1 ASC, field_name_2 DESC). Only first-level field keys are supported (no nested keys).
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def persons_id_deals_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PersonsApi.persons_id_deals_get ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PersonsApi.persons_id_deals_get"
      end
      # resource path
      local_var_path = "/persons/{id}/deals".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonsApi#persons_id_deals_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a person
    # Marks a person as deleted.
    # @param id ID of the person
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def persons_id_delete(id, opts = {})
      persons_id_delete_with_http_info(id, opts)
      return nil
    end

    # Delete a person
    # Marks a person as deleted.
    # @param id ID of the person
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def persons_id_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PersonsApi.persons_id_delete ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PersonsApi.persons_id_delete"
      end
      # resource path
      local_var_path = "/persons/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonsApi#persons_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List files attached to a person
    # Lists files associated with a person.
    # @param id ID of the person
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :start Pagination start (default to 0)
    # @option opts [Float] :limit Items shown per page
    # @option opts [String] :include_deleted_files When enabled, the list of files will also include deleted files. Please note that trying to download these files will not work. (default to )
    # @option opts [String] :sort Field names and sorting mode separated by comma (field_name_1 ASC, field_name_2 DESC). Only first-level field keys are supported (no nested keys). Supported fields: id, user_id, deal_id, person_id, org_id, product_id, add_time, update_time, file_name, file_type, file_size, comment. (default to )
    # @return [nil]
    def persons_id_files_get(id, opts = {})
      persons_id_files_get_with_http_info(id, opts)
      return nil
    end

    # List files attached to a person
    # Lists files associated with a person.
    # @param id ID of the person
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :start Pagination start
    # @option opts [Float] :limit Items shown per page
    # @option opts [String] :include_deleted_files When enabled, the list of files will also include deleted files. Please note that trying to download these files will not work.
    # @option opts [String] :sort Field names and sorting mode separated by comma (field_name_1 ASC, field_name_2 DESC). Only first-level field keys are supported (no nested keys). Supported fields: id, user_id, deal_id, person_id, org_id, product_id, add_time, update_time, file_name, file_type, file_size, comment.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def persons_id_files_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PersonsApi.persons_id_files_get ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PersonsApi.persons_id_files_get"
      end
      # resource path
      local_var_path = "/persons/{id}/files".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'include_deleted_files'] = opts[:'include_deleted_files'] if !opts[:'include_deleted_files'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonsApi#persons_id_files_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List updates about a person
    # Lists updates about a person.
    # @param id ID of the person
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :start Pagination start (default to 0)
    # @option opts [Float] :limit Items shown per page
    # @return [nil]
    def persons_id_flow_get(id, opts = {})
      persons_id_flow_get_with_http_info(id, opts)
      return nil
    end

    # List updates about a person
    # Lists updates about a person.
    # @param id ID of the person
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :start Pagination start
    # @option opts [Float] :limit Items shown per page
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def persons_id_flow_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PersonsApi.persons_id_flow_get ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PersonsApi.persons_id_flow_get"
      end
      # resource path
      local_var_path = "/persons/{id}/flow".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonsApi#persons_id_flow_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a follower from a person
    # Deletes a follower from a person.
    # @param id ID of the person
    # @param follower_id ID of the follower
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def persons_id_followers_follower_id_delete(id, follower_id, opts = {})
      persons_id_followers_follower_id_delete_with_http_info(id, follower_id, opts)
      return nil
    end

    # Delete a follower from a person
    # Deletes a follower from a person.
    # @param id ID of the person
    # @param follower_id ID of the follower
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def persons_id_followers_follower_id_delete_with_http_info(id, follower_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PersonsApi.persons_id_followers_follower_id_delete ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PersonsApi.persons_id_followers_follower_id_delete"
      end
      # verify the required parameter 'follower_id' is set
      if @api_client.config.client_side_validation && follower_id.nil?
        fail ArgumentError, "Missing the required parameter 'follower_id' when calling PersonsApi.persons_id_followers_follower_id_delete"
      end
      # resource path
      local_var_path = "/persons/{id}/followers/{follower_id}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'follower_id' + '}', follower_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonsApi#persons_id_followers_follower_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List followers of a person
    # Lists the followers of a person.
    # @param id ID of the person
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def persons_id_followers_get(id, opts = {})
      persons_id_followers_get_with_http_info(id, opts)
      return nil
    end

    # List followers of a person
    # Lists the followers of a person.
    # @param id ID of the person
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def persons_id_followers_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PersonsApi.persons_id_followers_get ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PersonsApi.persons_id_followers_get"
      end
      # resource path
      local_var_path = "/persons/{id}/followers".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonsApi#persons_id_followers_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a follower to a person
    # Adds a follower to a person.
    # @param id ID of the person
    # @param user_id ID of the user
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def persons_id_followers_post(id, user_id, opts = {})
      persons_id_followers_post_with_http_info(id, user_id, opts)
      return nil
    end

    # Add a follower to a person
    # Adds a follower to a person.
    # @param id ID of the person
    # @param user_id ID of the user
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def persons_id_followers_post_with_http_info(id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PersonsApi.persons_id_followers_post ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PersonsApi.persons_id_followers_post"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling PersonsApi.persons_id_followers_post"
      end
      # resource path
      local_var_path = "/persons/{id}/followers".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}
      form_params["user_id"] = user_id

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonsApi#persons_id_followers_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get details of a person
    # Returns details of a person. Note that this also returns some additional fields which are not present when asking for all persons. Also note that custom fields appear as long hashes in the resulting data. These hashes can be mapped against the 'key' value of personFields.
    # @param id ID of the person
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def persons_id_get(id, opts = {})
      persons_id_get_with_http_info(id, opts)
      return nil
    end

    # Get details of a person
    # Returns details of a person. Note that this also returns some additional fields which are not present when asking for all persons. Also note that custom fields appear as long hashes in the resulting data. These hashes can be mapped against the &#39;key&#39; value of personFields.
    # @param id ID of the person
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def persons_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PersonsApi.persons_id_get ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PersonsApi.persons_id_get"
      end
      # resource path
      local_var_path = "/persons/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonsApi#persons_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List mail messages associated with a person
    # Lists mail messages associated with a person.
    # @param id ID of the person
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :start Pagination start (default to 0)
    # @option opts [Float] :limit Items shown per page
    # @return [nil]
    def persons_id_mail_messages_get(id, opts = {})
      persons_id_mail_messages_get_with_http_info(id, opts)
      return nil
    end

    # List mail messages associated with a person
    # Lists mail messages associated with a person.
    # @param id ID of the person
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :start Pagination start
    # @option opts [Float] :limit Items shown per page
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def persons_id_mail_messages_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PersonsApi.persons_id_mail_messages_get ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PersonsApi.persons_id_mail_messages_get"
      end
      # resource path
      local_var_path = "/persons/{id}/mailMessages".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonsApi#persons_id_mail_messages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Merge two persons
    # Merges a person with another person.
    # @param id ID of the person that will be merged
    # @param merge_with_id ID of the person that the person will be merged with
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def persons_id_merge_put(id, merge_with_id, opts = {})
      persons_id_merge_put_with_http_info(id, merge_with_id, opts)
      return nil
    end

    # Merge two persons
    # Merges a person with another person.
    # @param id ID of the person that will be merged
    # @param merge_with_id ID of the person that the person will be merged with
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def persons_id_merge_put_with_http_info(id, merge_with_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PersonsApi.persons_id_merge_put ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PersonsApi.persons_id_merge_put"
      end
      # verify the required parameter 'merge_with_id' is set
      if @api_client.config.client_side_validation && merge_with_id.nil?
        fail ArgumentError, "Missing the required parameter 'merge_with_id' when calling PersonsApi.persons_id_merge_put"
      end
      # resource path
      local_var_path = "/persons/{id}/merge".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}
      form_params["merge_with_id"] = merge_with_id

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonsApi#persons_id_merge_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List permitted users
    # List users permitted to access a person
    # @param id ID of the person
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_level If set, filter results by allowed access level. 1 &#x3D; Read, 2 &#x3D; Write, 3 &#x3D; Read+Write (default to )
    # @return [nil]
    def persons_id_permitted_users_get(id, opts = {})
      persons_id_permitted_users_get_with_http_info(id, opts)
      return nil
    end

    # List permitted users
    # List users permitted to access a person
    # @param id ID of the person
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_level If set, filter results by allowed access level. 1 &#x3D; Read, 2 &#x3D; Write, 3 &#x3D; Read+Write
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def persons_id_permitted_users_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PersonsApi.persons_id_permitted_users_get ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PersonsApi.persons_id_permitted_users_get"
      end
      # resource path
      local_var_path = "/persons/{id}/permittedUsers".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'access_level'] = opts[:'access_level'] if !opts[:'access_level'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonsApi#persons_id_permitted_users_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete person picture
    # Delete person picture
    # @param id ID of the person
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def persons_id_picture_delete(id, opts = {})
      persons_id_picture_delete_with_http_info(id, opts)
      return nil
    end

    # Delete person picture
    # Delete person picture
    # @param id ID of the person
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def persons_id_picture_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PersonsApi.persons_id_picture_delete ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PersonsApi.persons_id_picture_delete"
      end
      # resource path
      local_var_path = "/persons/{id}/picture".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonsApi#persons_id_picture_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add person picture
    # Add a picture to a person. If a picture is already set, the old picture will be replaced. Added image (or the cropping parameters supplied with the request) should have an equal width and height and should be at least 128 pixels. GIF, JPG and PNG are accepted. All added images will be resized to 128 and 512 pixel wide squares.
    # @param id ID of the person
    # @param file One image supplied in the multipart/form-data encoding.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :crop_x X coordinate to where start cropping form (in pixels)
    # @option opts [Float] :crop_y Y coordinate to where start cropping form (in pixels)
    # @option opts [Float] :crop_width Width of cropping area (in pixels)
    # @option opts [Float] :crop_height Height of cropping area (in pixels)
    # @return [nil]
    def persons_id_picture_post(id, file, opts = {})
      persons_id_picture_post_with_http_info(id, file, opts)
      return nil
    end

    # Add person picture
    # Add a picture to a person. If a picture is already set, the old picture will be replaced. Added image (or the cropping parameters supplied with the request) should have an equal width and height and should be at least 128 pixels. GIF, JPG and PNG are accepted. All added images will be resized to 128 and 512 pixel wide squares.
    # @param id ID of the person
    # @param file One image supplied in the multipart/form-data encoding.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :crop_x X coordinate to where start cropping form (in pixels)
    # @option opts [Float] :crop_y Y coordinate to where start cropping form (in pixels)
    # @option opts [Float] :crop_width Width of cropping area (in pixels)
    # @option opts [Float] :crop_height Height of cropping area (in pixels)
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def persons_id_picture_post_with_http_info(id, file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PersonsApi.persons_id_picture_post ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PersonsApi.persons_id_picture_post"
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling PersonsApi.persons_id_picture_post"
      end
      # resource path
      local_var_path = "/persons/{id}/picture".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}
      form_params["file"] = file
      form_params["crop_x"] = opts[:'crop_x'] if !opts[:'crop_x'].nil?
      form_params["crop_y"] = opts[:'crop_y'] if !opts[:'crop_y'].nil?
      form_params["crop_width"] = opts[:'crop_width'] if !opts[:'crop_width'].nil?
      form_params["crop_height"] = opts[:'crop_height'] if !opts[:'crop_height'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonsApi#persons_id_picture_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List products associated with a person
    # Lists products associated with a person.
    # @param id ID of the person
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :start Pagination start (default to 0)
    # @option opts [Float] :limit Items shown per page
    # @return [nil]
    def persons_id_products_get(id, opts = {})
      persons_id_products_get_with_http_info(id, opts)
      return nil
    end

    # List products associated with a person
    # Lists products associated with a person.
    # @param id ID of the person
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :start Pagination start
    # @option opts [Float] :limit Items shown per page
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def persons_id_products_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PersonsApi.persons_id_products_get ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PersonsApi.persons_id_products_get"
      end
      # resource path
      local_var_path = "/persons/{id}/products".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonsApi#persons_id_products_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a person
    # Updates the properties of a person.
    # @param id Person ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Person name (default to )
    # @option opts [Float] :owner_id ID of the user who will be marked as the owner of this person. When omitted, the authorized user ID will be used.
    # @option opts [Float] :org_id ID of the organization this person will belong to.
    # @option opts [Array<String>] :email Email addresses (one or more) associated with the person, presented in the same manner as received by GET request of a person. (default to )
    # @option opts [Array<String>] :phone Phone numbers (one or more) associated with the person, presented in the same manner as received by GET request of a person. (default to )
    # @option opts [String] :visible_to Visibility of the person. If omitted, visibility will not be changed.&lt;dl class&#x3D;\&quot;fields-list\&quot;&gt;&lt;dt&gt;1&lt;/dt&gt;&lt;dd&gt;Owner &amp;amp; followers (private)&lt;/dd&gt;&lt;dt&gt;3&lt;/dt&gt;&lt;dd&gt;Entire company (shared)&lt;/dd&gt;&lt;/dl&gt; (default to )
    # @return [nil]
    def persons_id_put(id, opts = {})
      persons_id_put_with_http_info(id, opts)
      return nil
    end

    # Update a person
    # Updates the properties of a person.
    # @param id Person ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Person name
    # @option opts [Float] :owner_id ID of the user who will be marked as the owner of this person. When omitted, the authorized user ID will be used.
    # @option opts [Float] :org_id ID of the organization this person will belong to.
    # @option opts [Array<String>] :email Email addresses (one or more) associated with the person, presented in the same manner as received by GET request of a person.
    # @option opts [Array<String>] :phone Phone numbers (one or more) associated with the person, presented in the same manner as received by GET request of a person.
    # @option opts [String] :visible_to Visibility of the person. If omitted, visibility will not be changed.&lt;dl class&#x3D;\&quot;fields-list\&quot;&gt;&lt;dt&gt;1&lt;/dt&gt;&lt;dd&gt;Owner &amp;amp; followers (private)&lt;/dd&gt;&lt;dt&gt;3&lt;/dt&gt;&lt;dd&gt;Entire company (shared)&lt;/dd&gt;&lt;/dl&gt;
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def persons_id_put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PersonsApi.persons_id_put ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PersonsApi.persons_id_put"
      end
      # resource path
      local_var_path = "/persons/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}
      form_params["name"] = opts[:'name'] if !opts[:'name'].nil?
      form_params["owner_id"] = opts[:'owner_id'] if !opts[:'owner_id'].nil?
      form_params["org_id"] = opts[:'org_id'] if !opts[:'org_id'].nil?
      form_params["email"] = @api_client.build_collection_param(opts[:'email'], :csv) if !opts[:'email'].nil?
      form_params["phone"] = @api_client.build_collection_param(opts[:'phone'], :csv) if !opts[:'phone'].nil?
      form_params["visible_to"] = opts[:'visible_to'] if !opts[:'visible_to'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonsApi#persons_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a person
    # Adds a new person. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys. To determine which custom fields exists, fetch the personFields and look for 'key' values.
    # @param name Person name
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :owner_id ID of the user who will be marked as the owner of this person. When omitted, the authorized user ID will be used.
    # @option opts [Float] :org_id ID of the organization this person will belong to.
    # @option opts [Array<String>] :email Email addresses (one or more) associated with the person, presented in the same manner as received by GET request of a person. (default to )
    # @option opts [Array<String>] :phone Phone numbers (one or more) associated with the person, presented in the same manner as received by GET request of a person. (default to )
    # @option opts [String] :visible_to Visibility of the person. If omitted, visibility will be set to the default visibility setting of this item type for the authorized user.&lt;dl class&#x3D;\&quot;fields-list\&quot;&gt;&lt;dt&gt;1&lt;/dt&gt;&lt;dd&gt;Owner &amp;amp; followers (private)&lt;/dd&gt;&lt;dt&gt;3&lt;/dt&gt;&lt;dd&gt;Entire company (shared)&lt;/dd&gt;&lt;/dl&gt; (default to )
    # @option opts [String] :add_time Optional creation date &amp; time of the person in UTC. Requires admin user API token. Format: YYYY-MM-DD HH:MM:SS (default to )
    # @return [nil]
    def persons_post(name, opts = {})
      persons_post_with_http_info(name, opts)
      return nil
    end

    # Add a person
    # Adds a new person. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys. To determine which custom fields exists, fetch the personFields and look for &#39;key&#39; values.
    # @param name Person name
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :owner_id ID of the user who will be marked as the owner of this person. When omitted, the authorized user ID will be used.
    # @option opts [Float] :org_id ID of the organization this person will belong to.
    # @option opts [Array<String>] :email Email addresses (one or more) associated with the person, presented in the same manner as received by GET request of a person.
    # @option opts [Array<String>] :phone Phone numbers (one or more) associated with the person, presented in the same manner as received by GET request of a person.
    # @option opts [String] :visible_to Visibility of the person. If omitted, visibility will be set to the default visibility setting of this item type for the authorized user.&lt;dl class&#x3D;\&quot;fields-list\&quot;&gt;&lt;dt&gt;1&lt;/dt&gt;&lt;dd&gt;Owner &amp;amp; followers (private)&lt;/dd&gt;&lt;dt&gt;3&lt;/dt&gt;&lt;dd&gt;Entire company (shared)&lt;/dd&gt;&lt;/dl&gt;
    # @option opts [String] :add_time Optional creation date &amp; time of the person in UTC. Requires admin user API token. Format: YYYY-MM-DD HH:MM:SS
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def persons_post_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PersonsApi.persons_post ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling PersonsApi.persons_post"
      end
      # resource path
      local_var_path = "/persons"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}
      form_params["name"] = name
      form_params["owner_id"] = opts[:'owner_id'] if !opts[:'owner_id'].nil?
      form_params["org_id"] = opts[:'org_id'] if !opts[:'org_id'].nil?
      form_params["email"] = @api_client.build_collection_param(opts[:'email'], :csv) if !opts[:'email'].nil?
      form_params["phone"] = @api_client.build_collection_param(opts[:'phone'], :csv) if !opts[:'phone'].nil?
      form_params["visible_to"] = opts[:'visible_to'] if !opts[:'visible_to'].nil?
      form_params["add_time"] = opts[:'add_time'] if !opts[:'add_time'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonsApi#persons_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
