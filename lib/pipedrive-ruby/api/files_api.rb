=begin
#Pipedrive API v1

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module Pipedrive
  class FilesApi
    attr_accessor :api_client

    def initialize(api_client = Client.default)
      @api_client = api_client
    end

    # Get all files
    # Returns data about all files.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :start Pagination start (default to 0)
    # @option opts [Float] :limit Items shown per page
    # @option opts [String] :include_deleted_files When enabled, the list of files will also include deleted files. Please note that trying to download these files will not work. (default to )
    # @option opts [String] :sort Field names and sorting mode separated by comma (field_name_1 ASC, field_name_2 DESC). Only first-level field keys are supported (no nested keys). Supported fields: id, user_id, deal_id, person_id, org_id, product_id, add_time, update_time, file_name, file_type, file_size, comment. (default to )
    # @return [nil]
    def files_get(opts = {})
      files_get_with_http_info(opts)
      end

    # Get all files
    # Returns data about all files.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :start Pagination start
    # @option opts [Float] :limit Items shown per page
    # @option opts [String] :include_deleted_files When enabled, the list of files will also include deleted files. Please note that trying to download these files will not work.
    # @option opts [String] :sort Field names and sorting mode separated by comma (field_name_1 ASC, field_name_2 DESC). Only first-level field keys are supported (no nested keys). Supported fields: id, user_id, deal_id, person_id, org_id, product_id, add_time, update_time, file_name, file_type, file_size, comment.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def files_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FilesApi.files_get ..."
      end
      # resource path
      local_var_path = "/files"

      # query parameters
      query_params = {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'include_deleted_files'] = opts[:'include_deleted_files'] if !opts[:'include_deleted_files'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = [ 'access_token' ]
      response = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#files_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return response
    end

    # Delete a file
    # Marks a file as deleted.
    # @param id ID of the file to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def files_id_delete(id, opts = {})
      files_id_delete_with_http_info(id, opts)
      end

    # Delete a file
    # Marks a file as deleted.
    # @param id ID of the file to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def files_id_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FilesApi.files_id_delete ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FilesApi.files_id_delete"
      end
      # resource path
      local_var_path = "/files/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = [ 'access_token' ]
      response = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#files_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return response
    end

    # Download one file
    # Initializes a file download.
    # @param id ID of the file to download.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def files_id_download_get(id, opts = {})
      files_id_download_get_with_http_info(id, opts)
      end

    # Download one file
    # Initializes a file download.
    # @param id ID of the file to download.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def files_id_download_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FilesApi.files_id_download_get ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FilesApi.files_id_download_get"
      end
      # resource path
      local_var_path = "/files/{id}/download".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = [ 'access_token' ]
      response = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#files_id_download_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return response
    end

    # Get one file
    # Returns data about a specific file.
    # @param id ID of the file to fetch.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def files_id_get(id, opts = {})
      files_id_get_with_http_info(id, opts)
      end

    # Get one file
    # Returns data about a specific file.
    # @param id ID of the file to fetch.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def files_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FilesApi.files_id_get ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FilesApi.files_id_get"
      end
      # resource path
      local_var_path = "/files/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = [ 'access_token' ]
      response = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#files_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return response
    end

    # Update file details
    # Updates the properties of a file.
    # @param id ID of the file
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Visible name of the file (default to )
    # @option opts [String] :description Description of the file (default to )
    # @return [nil]
    def files_id_put(id, opts = {})
      files_id_put_with_http_info(id, opts)
      end

    # Update file details
    # Updates the properties of a file.
    # @param id ID of the file
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Visible name of the file
    # @option opts [String] :description Description of the file
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def files_id_put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FilesApi.files_id_put ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FilesApi.files_id_put"
      end
      # resource path
      local_var_path = "/files/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}
      form_params["name"] = opts[:'name'] if !opts[:'name'].nil?
      form_params["description"] = opts[:'description'] if !opts[:'description'].nil?

      # http body (model)
      post_body = nil
      auth_names = [ 'access_token' ]
      response = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#files_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return response
    end

    # Add file
    # Lets you upload a file, and associate it with a Deal, a Person, an Organization, an Activity or a Product.
    # @param file One or more files, supplied in the multipart/form-data encoding and contained within the given boundaries.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :deal_id ID of the deal to associate file(s) with.
    # @option opts [Float] :person_id ID of the person to associate file(s) with.
    # @option opts [Float] :org_id ID of the organization to associate file(s) with.
    # @option opts [Float] :product_id ID of the product to associate file(s) with.
    # @option opts [Float] :activity_id ID of the activity to associate file(s) with.
    # @option opts [Float] :note_id ID of the note to associate file(s) with.
    # @return [nil]
    def files_post(file, opts = {})
      files_post_with_http_info(file, opts)
      end

    # Add file
    # Lets you upload a file, and associate it with a Deal, a Person, an Organization, an Activity or a Product.
    # @param file One or more files, supplied in the multipart/form-data encoding and contained within the given boundaries.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :deal_id ID of the deal to associate file(s) with.
    # @option opts [Float] :person_id ID of the person to associate file(s) with.
    # @option opts [Float] :org_id ID of the organization to associate file(s) with.
    # @option opts [Float] :product_id ID of the product to associate file(s) with.
    # @option opts [Float] :activity_id ID of the activity to associate file(s) with.
    # @option opts [Float] :note_id ID of the note to associate file(s) with.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def files_post_with_http_info(file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FilesApi.files_post ..."
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling FilesApi.files_post"
      end
      # resource path
      local_var_path = "/files"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}
      form_params["file"] = file
      form_params["deal_id"] = opts[:'deal_id'] if !opts[:'deal_id'].nil?
      form_params["person_id"] = opts[:'person_id'] if !opts[:'person_id'].nil?
      form_params["org_id"] = opts[:'org_id'] if !opts[:'org_id'].nil?
      form_params["product_id"] = opts[:'product_id'] if !opts[:'product_id'].nil?
      form_params["activity_id"] = opts[:'activity_id'] if !opts[:'activity_id'].nil?
      form_params["note_id"] = opts[:'note_id'] if !opts[:'note_id'].nil?

      # http body (model)
      post_body = nil
      auth_names = [ 'access_token' ]
      response = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#files_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return response
    end

    # Link a remote file to an item
    # Links an existing remote file (googledrive, etc) to the item you supply.
    # @param item_type The item type.
    # @param item_id ID of the item to associate the file with.
    # @param remote_id The remote item id.
    # @param remote_location The location type to send the file to. Only googledrive is supported at the moment.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def files_remote_link_post(item_type, item_id, remote_id, remote_location, opts = {})
      files_remote_link_post_with_http_info(item_type, item_id, remote_id, remote_location, opts)
      end

    # Link a remote file to an item
    # Links an existing remote file (googledrive, etc) to the item you supply.
    # @param item_type The item type.
    # @param item_id ID of the item to associate the file with.
    # @param remote_id The remote item id.
    # @param remote_location The location type to send the file to. Only googledrive is supported at the moment.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def files_remote_link_post_with_http_info(item_type, item_id, remote_id, remote_location, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FilesApi.files_remote_link_post ..."
      end
      # verify the required parameter 'item_type' is set
      if @api_client.config.client_side_validation && item_type.nil?
        fail ArgumentError, "Missing the required parameter 'item_type' when calling FilesApi.files_remote_link_post"
      end
      # verify the required parameter 'item_id' is set
      if @api_client.config.client_side_validation && item_id.nil?
        fail ArgumentError, "Missing the required parameter 'item_id' when calling FilesApi.files_remote_link_post"
      end
      # verify the required parameter 'remote_id' is set
      if @api_client.config.client_side_validation && remote_id.nil?
        fail ArgumentError, "Missing the required parameter 'remote_id' when calling FilesApi.files_remote_link_post"
      end
      # verify the required parameter 'remote_location' is set
      if @api_client.config.client_side_validation && remote_location.nil?
        fail ArgumentError, "Missing the required parameter 'remote_location' when calling FilesApi.files_remote_link_post"
      end
      # resource path
      local_var_path = "/files/remoteLink"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}
      form_params["item_type"] = item_type
      form_params["item_id"] = item_id
      form_params["remote_id"] = remote_id
      form_params["remote_location"] = remote_location

      # http body (model)
      post_body = nil
      auth_names = [ 'access_token' ]
      response = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#files_remote_link_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return response
    end

    # Create a remote file and link it to an item
    # Creates a new empty file in the remote location (googledrive, etc) that will be linked to the item you supply.
    # @param file_type The file type.
    # @param title The title of the file.
    # @param item_type The item type.
    # @param item_id ID of the item to associate the file with.
    # @param remote_location The location type to send the file to. Only googledrive is supported at the moment.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def files_remote_post(file_type, title, item_type, item_id, remote_location, opts = {})
      files_remote_post_with_http_info(file_type, title, item_type, item_id, remote_location, opts)
      end

    # Create a remote file and link it to an item
    # Creates a new empty file in the remote location (googledrive, etc) that will be linked to the item you supply.
    # @param file_type The file type.
    # @param title The title of the file.
    # @param item_type The item type.
    # @param item_id ID of the item to associate the file with.
    # @param remote_location The location type to send the file to. Only googledrive is supported at the moment.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def files_remote_post_with_http_info(file_type, title, item_type, item_id, remote_location, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FilesApi.files_remote_post ..."
      end
      # verify the required parameter 'file_type' is set
      if @api_client.config.client_side_validation && file_type.nil?
        fail ArgumentError, "Missing the required parameter 'file_type' when calling FilesApi.files_remote_post"
      end
      # verify the required parameter 'title' is set
      if @api_client.config.client_side_validation && title.nil?
        fail ArgumentError, "Missing the required parameter 'title' when calling FilesApi.files_remote_post"
      end
      # verify the required parameter 'item_type' is set
      if @api_client.config.client_side_validation && item_type.nil?
        fail ArgumentError, "Missing the required parameter 'item_type' when calling FilesApi.files_remote_post"
      end
      # verify the required parameter 'item_id' is set
      if @api_client.config.client_side_validation && item_id.nil?
        fail ArgumentError, "Missing the required parameter 'item_id' when calling FilesApi.files_remote_post"
      end
      # verify the required parameter 'remote_location' is set
      if @api_client.config.client_side_validation && remote_location.nil?
        fail ArgumentError, "Missing the required parameter 'remote_location' when calling FilesApi.files_remote_post"
      end
      # resource path
      local_var_path = "/files/remote"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}
      form_params["file_type"] = file_type
      form_params["title"] = title
      form_params["item_type"] = item_type
      form_params["item_id"] = item_id
      form_params["remote_location"] = remote_location

      # http body (model)
      post_body = nil
      auth_names = [ 'access_token' ]
      response = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#files_remote_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return response
    end
  end
end
