=begin
#Pipedrive API v1

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module Pipedrive
  class WebhooksApi
    attr_accessor :api_client

    def initialize(api_client = Client.default)
      @api_client = api_client
    end

    # Get all webhooks
    # Returns data about all webhooks of a company.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def webhooks_get(opts = {})
      webhooks_get_with_http_info(opts)
      end

    # Get all webhooks
    # Returns data about all webhooks of a company.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def webhooks_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: WebhooksApi.webhooks_get ..."
      end
      # resource path
      local_var_path = "/webhooks"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = [ 'access_token' ]
      response = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhooksApi#webhooks_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return response
    end

    # Delete existing webhook
    # Deletes the specified webhook.
    # @param id ID of the webhook to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def webhooks_id_delete(id, opts = {})
      webhooks_id_delete_with_http_info(id, opts)
      end

    # Delete existing webhook
    # Deletes the specified webhook.
    # @param id ID of the webhook to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def webhooks_id_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: WebhooksApi.webhooks_id_delete ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling WebhooksApi.webhooks_id_delete"
      end
      # resource path
      local_var_path = "/webhooks/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = [ 'access_token' ]
      response = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhooksApi#webhooks_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return response
    end

    # Create a new webhook
    # Creates a new webhook and returns its details. Note that specifying an event which triggers the webhook combines 2 parameters - 'event_action' and 'event_object'. E.g., use '\\*.\\*' for getting notifications about all events, 'added.deal' for any newly added deals, 'deleted.persons' for any deleted persons, etc. See https://app.pipedrive.com/webhooks for more details.
    # @param subscription_url A full, valid, publicly accessible URL. Determines where to send the notifications. Please note that you cannot use Pipedrive API endpoints as the subscription_url.
    # @param event_action Type of action to receive notifications about. Wildcard will match all supported actions.
    # @param event_object Type of object to receive notifications about. Wildcard will match all supported objects.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :user_id ID of the user this webhook will be authorized with. If not set, current authorized user will be used. Note that this does not filter only certain user&#39;s events — rather, this specifies the user&#39;s permissions under which each event is checked. Events about objects the selected user is not entitled to access are not sent. If you want to receive notifications for all events, a top-level admin user should be used.
    # @option opts [String] :http_auth_user HTTP basic auth username of the subscription URL endpoint (if required). (default to )
    # @option opts [String] :http_auth_password HTTP basic auth password of the subscription URL endpoint (if required). (default to )
    # @return [nil]
    def webhooks_post(subscription_url, event_action, event_object, opts = {})
      webhooks_post_with_http_info(subscription_url, event_action, event_object, opts)
      end

    # Create a new webhook
    # Creates a new webhook and returns its details. Note that specifying an event which triggers the webhook combines 2 parameters - &#39;event_action&#39; and &#39;event_object&#39;. E.g., use &#39;\\*.\\*&#39; for getting notifications about all events, &#39;added.deal&#39; for any newly added deals, &#39;deleted.persons&#39; for any deleted persons, etc. See https://app.pipedrive.com/webhooks for more details.
    # @param subscription_url A full, valid, publicly accessible URL. Determines where to send the notifications. Please note that you cannot use Pipedrive API endpoints as the subscription_url.
    # @param event_action Type of action to receive notifications about. Wildcard will match all supported actions.
    # @param event_object Type of object to receive notifications about. Wildcard will match all supported objects.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :user_id ID of the user this webhook will be authorized with. If not set, current authorized user will be used. Note that this does not filter only certain user&#39;s events — rather, this specifies the user&#39;s permissions under which each event is checked. Events about objects the selected user is not entitled to access are not sent. If you want to receive notifications for all events, a top-level admin user should be used.
    # @option opts [String] :http_auth_user HTTP basic auth username of the subscription URL endpoint (if required).
    # @option opts [String] :http_auth_password HTTP basic auth password of the subscription URL endpoint (if required).
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def webhooks_post_with_http_info(subscription_url, event_action, event_object, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: WebhooksApi.webhooks_post ..."
      end
      # verify the required parameter 'subscription_url' is set
      if @api_client.config.client_side_validation && subscription_url.nil?
        fail ArgumentError, "Missing the required parameter 'subscription_url' when calling WebhooksApi.webhooks_post"
      end
      # verify the required parameter 'event_action' is set
      if @api_client.config.client_side_validation && event_action.nil?
        fail ArgumentError, "Missing the required parameter 'event_action' when calling WebhooksApi.webhooks_post"
      end
      # verify the required parameter 'event_object' is set
      if @api_client.config.client_side_validation && event_object.nil?
        fail ArgumentError, "Missing the required parameter 'event_object' when calling WebhooksApi.webhooks_post"
      end
      # resource path
      local_var_path = "/webhooks"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}
      form_params["subscription_url"] = subscription_url
      form_params["event_action"] = event_action
      form_params["event_object"] = event_object
      form_params["user_id"] = opts[:'user_id'] if !opts[:'user_id'].nil?
      form_params["http_auth_user"] = opts[:'http_auth_user'] if !opts[:'http_auth_user'].nil?
      form_params["http_auth_password"] = opts[:'http_auth_password'] if !opts[:'http_auth_password'].nil?

      # http body (model)
      post_body = nil
      auth_names = [ 'access_token' ]
      response = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhooksApi#webhooks_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return response
    end
  end
end
