=begin
#Pipedrive API v1

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module Pipedrive
  class ActivityTypesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Delete multiple activity types in bulk
    # Marks multiple activity types as deleted.
    # @param ids Comma-separated activity type IDs to delete
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def activity_types_delete(ids, opts = {})
      activity_types_delete_with_http_info(ids, opts)
      return nil
    end

    # Delete multiple activity types in bulk
    # Marks multiple activity types as deleted.
    # @param ids Comma-separated activity type IDs to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def activity_types_delete_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ActivityTypesApi.activity_types_delete ..."
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling ActivityTypesApi.activity_types_delete"
      end
      # resource path
      local_var_path = "/activityTypes"

      # query parameters
      query_params = {}
      query_params[:'ids'] = ids

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActivityTypesApi#activity_types_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all activity types
    # Returns all activity types
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def activity_types_get(opts = {})
      activity_types_get_with_http_info(opts)
      return nil
    end

    # Get all activity types
    # Returns all activity types
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def activity_types_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ActivityTypesApi.activity_types_get ..."
      end
      # resource path
      local_var_path = "/activityTypes"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActivityTypesApi#activity_types_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an activity type
    # Marks an activity type as deleted.
    # @param id ID of the activity type
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def activity_types_id_delete(id, opts = {})
      activity_types_id_delete_with_http_info(id, opts)
      return nil
    end

    # Delete an activity type
    # Marks an activity type as deleted.
    # @param id ID of the activity type
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def activity_types_id_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ActivityTypesApi.activity_types_id_delete ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ActivityTypesApi.activity_types_id_delete"
      end
      # resource path
      local_var_path = "/activityTypes/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActivityTypesApi#activity_types_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Edit activity type
    # Updates an activity type.
    # @param id ID of the activity type
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Name of the activity type (default to )
    # @option opts [String] :icon_key Icon graphic to use. Supported values: default, call, meeting, lunch, email, task, deadline. Additional supported values will be made available in the future. (default to )
    # @option opts [String] :color A designated color for the activity type in 6-character HEX format (e.g. FFFFFF for white, 000000 for black). (default to )
    # @option opts [Float] :order_nr An order number for this activity type. Order numbers should be used to order the types in the activity type selections.
    # @return [nil]
    def activity_types_id_put(id, opts = {})
      activity_types_id_put_with_http_info(id, opts)
      return nil
    end

    # Edit activity type
    # Updates an activity type.
    # @param id ID of the activity type
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Name of the activity type
    # @option opts [String] :icon_key Icon graphic to use. Supported values: default, call, meeting, lunch, email, task, deadline. Additional supported values will be made available in the future.
    # @option opts [String] :color A designated color for the activity type in 6-character HEX format (e.g. FFFFFF for white, 000000 for black).
    # @option opts [Float] :order_nr An order number for this activity type. Order numbers should be used to order the types in the activity type selections.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def activity_types_id_put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ActivityTypesApi.activity_types_id_put ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ActivityTypesApi.activity_types_id_put"
      end
      # resource path
      local_var_path = "/activityTypes/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}
      form_params["name"] = opts[:'name'] if !opts[:'name'].nil?
      form_params["icon_key"] = opts[:'icon_key'] if !opts[:'icon_key'].nil?
      form_params["color"] = opts[:'color'] if !opts[:'color'].nil?
      form_params["order_nr"] = opts[:'order_nr'] if !opts[:'order_nr'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActivityTypesApi#activity_types_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add new activity type
    # Adds a new activity type, returns the ID, the key_string and the order number of the newly added activity type upon success.
    # @param name Name of the activity type
    # @param icon_key Icon graphic to use for representing this activity type.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :color A designated color for the activity type in 6-character HEX format (e.g. FFFFFF for white, 000000 for black). (default to )
    # @return [nil]
    def activity_types_post(name, icon_key, opts = {})
      activity_types_post_with_http_info(name, icon_key, opts)
      return nil
    end

    # Add new activity type
    # Adds a new activity type, returns the ID, the key_string and the order number of the newly added activity type upon success.
    # @param name Name of the activity type
    # @param icon_key Icon graphic to use for representing this activity type.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :color A designated color for the activity type in 6-character HEX format (e.g. FFFFFF for white, 000000 for black).
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def activity_types_post_with_http_info(name, icon_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ActivityTypesApi.activity_types_post ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ActivityTypesApi.activity_types_post"
      end
      # verify the required parameter 'icon_key' is set
      if @api_client.config.client_side_validation && icon_key.nil?
        fail ArgumentError, "Missing the required parameter 'icon_key' when calling ActivityTypesApi.activity_types_post"
      end
      # resource path
      local_var_path = "/activityTypes"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}
      form_params["name"] = name
      form_params["icon_key"] = icon_key
      form_params["color"] = opts[:'color'] if !opts[:'color'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActivityTypesApi#activity_types_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
