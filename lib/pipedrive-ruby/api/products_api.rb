=begin
#Pipedrive API v1

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module Pipedrive
  class ProductsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Find products by name
    # Returns data about the products that were found. If currency was set in request, prices in that currency are served back.
    # @param term Search term to look for, minimum 3 characters.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :currency Currency code in which prices should be returned in. If omitted, prices in user&#39;s default currency will be returned. (default to )
    # @option opts [Float] :start Pagination start (default to 0)
    # @option opts [Float] :limit Items shown per page
    # @return [nil]
    def products_find_get(term, opts = {})
      products_find_get_with_http_info(term, opts)
      return nil
    end

    # Find products by name
    # Returns data about the products that were found. If currency was set in request, prices in that currency are served back.
    # @param term Search term to look for, minimum 3 characters.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :currency Currency code in which prices should be returned in. If omitted, prices in user&#39;s default currency will be returned.
    # @option opts [Float] :start Pagination start
    # @option opts [Float] :limit Items shown per page
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def products_find_get_with_http_info(term, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductsApi.products_find_get ..."
      end
      # verify the required parameter 'term' is set
      if @api_client.config.client_side_validation && term.nil?
        fail ArgumentError, "Missing the required parameter 'term' when calling ProductsApi.products_find_get"
      end
      # resource path
      local_var_path = "/products/find"

      # query parameters
      query_params = {}
      query_params[:'term'] = term
      query_params[:'currency'] = opts[:'currency'] if !opts[:'currency'].nil?
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductsApi#products_find_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all products
    # Returns data about all products
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :user_id If supplied, only products owned by the given user will be returned.
    # @option opts [Float] :filter_id ID of the filter to use
    # @option opts [String] :first_char If supplied, only products whose name starts with the specified letter will be returned (case insensitive). (default to )
    # @option opts [Float] :start Pagination start (default to 0)
    # @option opts [Float] :limit Items shown per page
    # @return [nil]
    def products_get(opts = {})
      products_get_with_http_info(opts)
      return nil
    end

    # Get all products
    # Returns data about all products
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :user_id If supplied, only products owned by the given user will be returned.
    # @option opts [Float] :filter_id ID of the filter to use
    # @option opts [String] :first_char If supplied, only products whose name starts with the specified letter will be returned (case insensitive).
    # @option opts [Float] :start Pagination start
    # @option opts [Float] :limit Items shown per page
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def products_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductsApi.products_get ..."
      end
      # resource path
      local_var_path = "/products"

      # query parameters
      query_params = {}
      query_params[:'user_id'] = opts[:'user_id'] if !opts[:'user_id'].nil?
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'first_char'] = opts[:'first_char'] if !opts[:'first_char'].nil?
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductsApi#products_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get deals where a product is attached to
    # Returns data about a deals that have a product attached to.
    # @param id ID of the product
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :start Pagination start (default to 0)
    # @option opts [Float] :limit Items shown per page
    # @option opts [String] :status Only fetch deals with specific status. If omitted, all not deleted deals are fetched. (default to all_not_deleted)
    # @return [nil]
    def products_id_deals_get(id, opts = {})
      products_id_deals_get_with_http_info(id, opts)
      return nil
    end

    # Get deals where a product is attached to
    # Returns data about a deals that have a product attached to.
    # @param id ID of the product
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :start Pagination start
    # @option opts [Float] :limit Items shown per page
    # @option opts [String] :status Only fetch deals with specific status. If omitted, all not deleted deals are fetched.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def products_id_deals_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductsApi.products_id_deals_get ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProductsApi.products_id_deals_get"
      end
      # resource path
      local_var_path = "/products/{id}/deals".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductsApi#products_id_deals_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a product
    # Marks a product as deleted.
    # @param id ID of the product to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def products_id_delete(id, opts = {})
      products_id_delete_with_http_info(id, opts)
      return nil
    end

    # Delete a product
    # Marks a product as deleted.
    # @param id ID of the product to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def products_id_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductsApi.products_id_delete ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProductsApi.products_id_delete"
      end
      # resource path
      local_var_path = "/products/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductsApi#products_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List files attached to a product
    # Lists files associated with a product.
    # @param id ID of the product
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :start Pagination start (default to 0)
    # @option opts [Float] :limit Items shown per page
    # @option opts [String] :include_deleted_files When enabled, the list of files will also include deleted files. Please note that trying to download these files will not work. (default to )
    # @option opts [String] :sort Field names and sorting mode separated by comma (field_name_1 ASC, field_name_2 DESC). Only first-level field keys are supported (no nested keys). Supported fields: id, user_id, deal_id, person_id, org_id, product_id, add_time, update_time, file_name, file_type, file_size, comment. (default to )
    # @return [nil]
    def products_id_files_get(id, opts = {})
      products_id_files_get_with_http_info(id, opts)
      return nil
    end

    # List files attached to a product
    # Lists files associated with a product.
    # @param id ID of the product
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :start Pagination start
    # @option opts [Float] :limit Items shown per page
    # @option opts [String] :include_deleted_files When enabled, the list of files will also include deleted files. Please note that trying to download these files will not work.
    # @option opts [String] :sort Field names and sorting mode separated by comma (field_name_1 ASC, field_name_2 DESC). Only first-level field keys are supported (no nested keys). Supported fields: id, user_id, deal_id, person_id, org_id, product_id, add_time, update_time, file_name, file_type, file_size, comment.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def products_id_files_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductsApi.products_id_files_get ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProductsApi.products_id_files_get"
      end
      # resource path
      local_var_path = "/products/{id}/files".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'include_deleted_files'] = opts[:'include_deleted_files'] if !opts[:'include_deleted_files'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductsApi#products_id_files_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a follower from a product
    # Deletes a follower from a product.
    # @param id ID of the product
    # @param follower_id ID of the follower
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def products_id_followers_follower_id_delete(id, follower_id, opts = {})
      products_id_followers_follower_id_delete_with_http_info(id, follower_id, opts)
      return nil
    end

    # Delete a follower from a product
    # Deletes a follower from a product.
    # @param id ID of the product
    # @param follower_id ID of the follower
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def products_id_followers_follower_id_delete_with_http_info(id, follower_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductsApi.products_id_followers_follower_id_delete ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProductsApi.products_id_followers_follower_id_delete"
      end
      # verify the required parameter 'follower_id' is set
      if @api_client.config.client_side_validation && follower_id.nil?
        fail ArgumentError, "Missing the required parameter 'follower_id' when calling ProductsApi.products_id_followers_follower_id_delete"
      end
      # resource path
      local_var_path = "/products/{id}/followers/{follower_id}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'follower_id' + '}', follower_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductsApi#products_id_followers_follower_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List followers of a product
    # Lists the followers of a product.
    # @param id ID of the product
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def products_id_followers_get(id, opts = {})
      products_id_followers_get_with_http_info(id, opts)
      return nil
    end

    # List followers of a product
    # Lists the followers of a product.
    # @param id ID of the product
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def products_id_followers_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductsApi.products_id_followers_get ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProductsApi.products_id_followers_get"
      end
      # resource path
      local_var_path = "/products/{id}/followers".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductsApi#products_id_followers_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a follower to a product
    # Adds a follower to a product.
    # @param id ID of the product
    # @param user_id ID of the user
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def products_id_followers_post(id, user_id, opts = {})
      products_id_followers_post_with_http_info(id, user_id, opts)
      return nil
    end

    # Add a follower to a product
    # Adds a follower to a product.
    # @param id ID of the product
    # @param user_id ID of the user
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def products_id_followers_post_with_http_info(id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductsApi.products_id_followers_post ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProductsApi.products_id_followers_post"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling ProductsApi.products_id_followers_post"
      end
      # resource path
      local_var_path = "/products/{id}/followers".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}
      form_params["user_id"] = user_id

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductsApi#products_id_followers_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get one product
    # Returns data about a specific products
    # @param id ID of the product
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def products_id_get(id, opts = {})
      products_id_get_with_http_info(id, opts)
      return nil
    end

    # Get one product
    # Returns data about a specific products
    # @param id ID of the product
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def products_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductsApi.products_id_get ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProductsApi.products_id_get"
      end
      # resource path
      local_var_path = "/products/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductsApi#products_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List permitted users
    # List users permitted to access a product
    # @param id ID of the product
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_level If set, filter results by allowed access level. 1 &#x3D; Read, 2 &#x3D; Write, 3 &#x3D; Read+Write (default to )
    # @return [nil]
    def products_id_permitted_users_get(id, opts = {})
      products_id_permitted_users_get_with_http_info(id, opts)
      return nil
    end

    # List permitted users
    # List users permitted to access a product
    # @param id ID of the product
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_level If set, filter results by allowed access level. 1 &#x3D; Read, 2 &#x3D; Write, 3 &#x3D; Read+Write
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def products_id_permitted_users_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductsApi.products_id_permitted_users_get ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProductsApi.products_id_permitted_users_get"
      end
      # resource path
      local_var_path = "/products/{id}/permittedUsers".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'access_level'] = opts[:'access_level'] if !opts[:'access_level'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductsApi#products_id_permitted_users_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a product
    # Updates product data.
    # @param id ID of the product
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Name of the product. (default to )
    # @option opts [String] :code Product code. (default to )
    # @option opts [String] :unit Unit in which this product is sold (default to )
    # @option opts [Float] :tax Tax percentage (default to 0)
    # @option opts [String] :active_flag Whether this product will be made active or not. (default to 1)
    # @option opts [String] :visible_to Visibility of the product. If omitted, visibility will be set to the default visibility setting of this item type for the authorized user.&lt;dl class&#x3D;\&quot;fields-list\&quot;&gt;&lt;dt&gt;1&lt;/dt&gt;&lt;dd&gt;Owner &amp;amp; followers (private)&lt;/dd&gt;&lt;dt&gt;3&lt;/dt&gt;&lt;dd&gt;Entire company (shared)&lt;/dd&gt;&lt;/dl&gt; (default to )
    # @option opts [Float] :owner_id ID of the user who will be marked as the owner of this product. When omitted, the authorized user ID will be used.
    # @option opts [Array<String>] :prices Array of objects, each containing: currency (string), price (number), cost (number, optional), overhead_cost (number, optional). Note that there can only be one price per product per currency. When &#39;prices&#39; is omitted altogether, product pricing will not be changed. (default to )
    # @return [nil]
    def products_id_put(id, opts = {})
      products_id_put_with_http_info(id, opts)
      return nil
    end

    # Update a product
    # Updates product data.
    # @param id ID of the product
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Name of the product.
    # @option opts [String] :code Product code.
    # @option opts [String] :unit Unit in which this product is sold
    # @option opts [Float] :tax Tax percentage
    # @option opts [String] :active_flag Whether this product will be made active or not.
    # @option opts [String] :visible_to Visibility of the product. If omitted, visibility will be set to the default visibility setting of this item type for the authorized user.&lt;dl class&#x3D;\&quot;fields-list\&quot;&gt;&lt;dt&gt;1&lt;/dt&gt;&lt;dd&gt;Owner &amp;amp; followers (private)&lt;/dd&gt;&lt;dt&gt;3&lt;/dt&gt;&lt;dd&gt;Entire company (shared)&lt;/dd&gt;&lt;/dl&gt;
    # @option opts [Float] :owner_id ID of the user who will be marked as the owner of this product. When omitted, the authorized user ID will be used.
    # @option opts [Array<String>] :prices Array of objects, each containing: currency (string), price (number), cost (number, optional), overhead_cost (number, optional). Note that there can only be one price per product per currency. When &#39;prices&#39; is omitted altogether, product pricing will not be changed.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def products_id_put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductsApi.products_id_put ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProductsApi.products_id_put"
      end
      # resource path
      local_var_path = "/products/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}
      form_params["name"] = opts[:'name'] if !opts[:'name'].nil?
      form_params["code"] = opts[:'code'] if !opts[:'code'].nil?
      form_params["unit"] = opts[:'unit'] if !opts[:'unit'].nil?
      form_params["tax"] = opts[:'tax'] if !opts[:'tax'].nil?
      form_params["active_flag"] = opts[:'active_flag'] if !opts[:'active_flag'].nil?
      form_params["visible_to"] = opts[:'visible_to'] if !opts[:'visible_to'].nil?
      form_params["owner_id"] = opts[:'owner_id'] if !opts[:'owner_id'].nil?
      form_params["prices"] = @api_client.build_collection_param(opts[:'prices'], :csv) if !opts[:'prices'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductsApi#products_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a product
    # Adds a new product to the products inventory.
    # @param name Name of the product.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :code Product code. (default to )
    # @option opts [String] :unit Unit in which this product is sold (default to )
    # @option opts [Float] :tax Tax percentage (default to 0)
    # @option opts [String] :active_flag Whether this product will be made active or not. (default to 1)
    # @option opts [String] :visible_to Visibility of the product. If omitted, visibility will be set to the default visibility setting of this item type for the authorized user.&lt;dl class&#x3D;\&quot;fields-list\&quot;&gt;&lt;dt&gt;1&lt;/dt&gt;&lt;dd&gt;Owner &amp;amp; followers (private)&lt;/dd&gt;&lt;dt&gt;3&lt;/dt&gt;&lt;dd&gt;Entire company (shared)&lt;/dd&gt;&lt;/dl&gt; (default to )
    # @option opts [Float] :owner_id ID of the user who will be marked as the owner of this product. When omitted, the authorized user ID will be used.
    # @option opts [] :prices Array of objects, each containing: currency (string), price (number), cost (number, optional), overhead_cost (number, optional). Note that there can only be one price per product per currency. When &#39;prices&#39; is omitted altogether, no prices will be set up for the product.
    # @return [nil]
    def products_post(name, opts = {})
      products_post_with_http_info(name, opts)
      return nil
    end

    # Add a product
    # Adds a new product to the products inventory.
    # @param name Name of the product.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :code Product code.
    # @option opts [String] :unit Unit in which this product is sold
    # @option opts [Float] :tax Tax percentage
    # @option opts [String] :active_flag Whether this product will be made active or not.
    # @option opts [String] :visible_to Visibility of the product. If omitted, visibility will be set to the default visibility setting of this item type for the authorized user.&lt;dl class&#x3D;\&quot;fields-list\&quot;&gt;&lt;dt&gt;1&lt;/dt&gt;&lt;dd&gt;Owner &amp;amp; followers (private)&lt;/dd&gt;&lt;dt&gt;3&lt;/dt&gt;&lt;dd&gt;Entire company (shared)&lt;/dd&gt;&lt;/dl&gt;
    # @option opts [Float] :owner_id ID of the user who will be marked as the owner of this product. When omitted, the authorized user ID will be used.
    # @option opts [] :prices Array of objects, each containing: currency (string), price (number), cost (number, optional), overhead_cost (number, optional). Note that there can only be one price per product per currency. When &#39;prices&#39; is omitted altogether, no prices will be set up for the product.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def products_post_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductsApi.products_post ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ProductsApi.products_post"
      end
      # resource path
      local_var_path = "/products"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}
      form_params["name"] = name
      form_params["code"] = opts[:'code'] if !opts[:'code'].nil?
      form_params["unit"] = opts[:'unit'] if !opts[:'unit'].nil?
      form_params["tax"] = opts[:'tax'] if !opts[:'tax'].nil?
      form_params["active_flag"] = opts[:'active_flag'] if !opts[:'active_flag'].nil?
      form_params["visible_to"] = opts[:'visible_to'] if !opts[:'visible_to'].nil?
      form_params["owner_id"] = opts[:'owner_id'] if !opts[:'owner_id'].nil?

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'prices'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductsApi#products_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
