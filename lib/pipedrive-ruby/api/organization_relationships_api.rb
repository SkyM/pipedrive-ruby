=begin
#Pipedrive API v1

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module Pipedrive
  class OrganizationRelationshipsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Get all relationships for organization
    # Gets all of the relationships for a supplied organization id.
    # @param org_id ID of the organization to get relationships for
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def organization_relationships_get(org_id, opts = {})
      organization_relationships_get_with_http_info(org_id, opts)
      return nil
    end

    # Get all relationships for organization
    # Gets all of the relationships for a supplied organization id.
    # @param org_id ID of the organization to get relationships for
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def organization_relationships_get_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: OrganizationRelationshipsApi.organization_relationships_get ..."
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling OrganizationRelationshipsApi.organization_relationships_get"
      end
      # resource path
      local_var_path = "/organizationRelationships"

      # query parameters
      query_params = {}
      query_params[:'org_id'] = org_id

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationRelationshipsApi#organization_relationships_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an organization relationship
    # Deletes an organization relationship and returns the deleted id.
    # @param id ID of the organization relationship
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def organization_relationships_id_delete(id, opts = {})
      organization_relationships_id_delete_with_http_info(id, opts)
      return nil
    end

    # Delete an organization relationship
    # Deletes an organization relationship and returns the deleted id.
    # @param id ID of the organization relationship
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def organization_relationships_id_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: OrganizationRelationshipsApi.organization_relationships_id_delete ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling OrganizationRelationshipsApi.organization_relationships_id_delete"
      end
      # resource path
      local_var_path = "/organizationRelationships/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationRelationshipsApi#organization_relationships_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get one organization relationship
    # Finds and returns an organization relationship from its ID.
    # @param id ID of the organization relationship
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :org_id ID of the base organization for the returned calculated values
    # @return [nil]
    def organization_relationships_id_get(id, opts = {})
      organization_relationships_id_get_with_http_info(id, opts)
      return nil
    end

    # Get one organization relationship
    # Finds and returns an organization relationship from its ID.
    # @param id ID of the organization relationship
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :org_id ID of the base organization for the returned calculated values
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def organization_relationships_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: OrganizationRelationshipsApi.organization_relationships_id_get ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling OrganizationRelationshipsApi.organization_relationships_id_get"
      end
      # resource path
      local_var_path = "/organizationRelationships/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'org_id'] = opts[:'org_id'] if !opts[:'org_id'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationRelationshipsApi#organization_relationships_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an organization relationship
    # Updates and returns an organization relationship.
    # @param id ID of the organization relationship
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :org_id ID of the base organization for the returned calculated values
    # @option opts [String] :type The type of organization relationship. (default to )
    # @option opts [Float] :rel_owner_org_id The owner of this relationship. If type is &#39;parent&#39;, then the owner is the parent and the linked organization is the daughter.
    # @option opts [Float] :rel_linked_org_id The linked organization in this relationship. If type is &#39;parent&#39;, then the linked organization is the daughter.
    # @return [nil]
    def organization_relationships_id_put(id, opts = {})
      organization_relationships_id_put_with_http_info(id, opts)
      return nil
    end

    # Update an organization relationship
    # Updates and returns an organization relationship.
    # @param id ID of the organization relationship
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :org_id ID of the base organization for the returned calculated values
    # @option opts [String] :type The type of organization relationship.
    # @option opts [Float] :rel_owner_org_id The owner of this relationship. If type is &#39;parent&#39;, then the owner is the parent and the linked organization is the daughter.
    # @option opts [Float] :rel_linked_org_id The linked organization in this relationship. If type is &#39;parent&#39;, then the linked organization is the daughter.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def organization_relationships_id_put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: OrganizationRelationshipsApi.organization_relationships_id_put ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling OrganizationRelationshipsApi.organization_relationships_id_put"
      end
      # resource path
      local_var_path = "/organizationRelationships/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}
      form_params["org_id"] = opts[:'org_id'] if !opts[:'org_id'].nil?
      form_params["type"] = opts[:'type'] if !opts[:'type'].nil?
      form_params["rel_owner_org_id"] = opts[:'rel_owner_org_id'] if !opts[:'rel_owner_org_id'].nil?
      form_params["rel_linked_org_id"] = opts[:'rel_linked_org_id'] if !opts[:'rel_linked_org_id'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationRelationshipsApi#organization_relationships_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an organization relationship
    # Creates and returns an organization relationship.
    # @param type The type of organization relationship.
    # @param rel_owner_org_id The owner of this relationship. If type is &#39;parent&#39;, then the owner is the parent and the linked organization is the daughter.
    # @param rel_linked_org_id The linked organization in this relationship. If type is &#39;parent&#39;, then the linked organization is the daughter.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :org_id ID of the base organization for the returned calculated values
    # @return [nil]
    def organization_relationships_post(type, rel_owner_org_id, rel_linked_org_id, opts = {})
      organization_relationships_post_with_http_info(type, rel_owner_org_id, rel_linked_org_id, opts)
      return nil
    end

    # Create an organization relationship
    # Creates and returns an organization relationship.
    # @param type The type of organization relationship.
    # @param rel_owner_org_id The owner of this relationship. If type is &#39;parent&#39;, then the owner is the parent and the linked organization is the daughter.
    # @param rel_linked_org_id The linked organization in this relationship. If type is &#39;parent&#39;, then the linked organization is the daughter.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :org_id ID of the base organization for the returned calculated values
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def organization_relationships_post_with_http_info(type, rel_owner_org_id, rel_linked_org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: OrganizationRelationshipsApi.organization_relationships_post ..."
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling OrganizationRelationshipsApi.organization_relationships_post"
      end
      # verify the required parameter 'rel_owner_org_id' is set
      if @api_client.config.client_side_validation && rel_owner_org_id.nil?
        fail ArgumentError, "Missing the required parameter 'rel_owner_org_id' when calling OrganizationRelationshipsApi.organization_relationships_post"
      end
      # verify the required parameter 'rel_linked_org_id' is set
      if @api_client.config.client_side_validation && rel_linked_org_id.nil?
        fail ArgumentError, "Missing the required parameter 'rel_linked_org_id' when calling OrganizationRelationshipsApi.organization_relationships_post"
      end
      # resource path
      local_var_path = "/organizationRelationships"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}
      form_params["type"] = type
      form_params["rel_owner_org_id"] = rel_owner_org_id
      form_params["rel_linked_org_id"] = rel_linked_org_id
      form_params["org_id"] = opts[:'org_id'] if !opts[:'org_id'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationRelationshipsApi#organization_relationships_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
