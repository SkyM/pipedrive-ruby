=begin
#Pipedrive API v1

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module Pipedrive
  class SearchResultsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Perform a search using a specific field value
    # Performs a search from a specific field's values. Results can be either the distinct values of the field (useful for searching autocomplete field values), or actual items IDs (deals, persons, organizations or products). Works only with the following field types: varchar, varchar_auto, double, address, text, phone, date.
    # @param term Search term to look for, minimum 2 characters.
    # @param field_type Type of the field to perform the search from.
    # @param field_key Key of the field to search from. Field key can be obtained by fetching the list of fields using any of fields API GET methods (dealFields, personFields, ..).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :exact_match When enabled, only full exact matches against the given term are returned. By default, term can be present anywhere in the resulting field values to be considered a match. The minimum 2 character limit for the term is discarded when exact_match is enabled. (default to )
    # @option opts [String] :return_field_key Name of the field in search results from which the search was performed. When omitted, &#39;value&#39; will be used. You may want to set this parameter to match the field_key. (default to )
    # @option opts [String] :return_item_ids Whether to return matching items IDs in search results. When omitted or set to 0, only distinct values of the searched field are returned. When enabled, the return_field_key parameter is ignored and the results include the searched field as its own key. (default to )
    # @option opts [Float] :start Pagination start (default to 0)
    # @option opts [Float] :limit Items shown per page
    # @return [nil]
    def search_results_field_get(term, field_type, field_key, opts = {})
      search_results_field_get_with_http_info(term, field_type, field_key, opts)
      return nil
    end

    # Perform a search using a specific field value
    # Performs a search from a specific field&#39;s values. Results can be either the distinct values of the field (useful for searching autocomplete field values), or actual items IDs (deals, persons, organizations or products). Works only with the following field types: varchar, varchar_auto, double, address, text, phone, date.
    # @param term Search term to look for, minimum 2 characters.
    # @param field_type Type of the field to perform the search from.
    # @param field_key Key of the field to search from. Field key can be obtained by fetching the list of fields using any of fields API GET methods (dealFields, personFields, ..).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :exact_match When enabled, only full exact matches against the given term are returned. By default, term can be present anywhere in the resulting field values to be considered a match. The minimum 2 character limit for the term is discarded when exact_match is enabled.
    # @option opts [String] :return_field_key Name of the field in search results from which the search was performed. When omitted, &#39;value&#39; will be used. You may want to set this parameter to match the field_key.
    # @option opts [String] :return_item_ids Whether to return matching items IDs in search results. When omitted or set to 0, only distinct values of the searched field are returned. When enabled, the return_field_key parameter is ignored and the results include the searched field as its own key.
    # @option opts [Float] :start Pagination start
    # @option opts [Float] :limit Items shown per page
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def search_results_field_get_with_http_info(term, field_type, field_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SearchResultsApi.search_results_field_get ..."
      end
      # verify the required parameter 'term' is set
      if @api_client.config.client_side_validation && term.nil?
        fail ArgumentError, "Missing the required parameter 'term' when calling SearchResultsApi.search_results_field_get"
      end
      # verify the required parameter 'field_type' is set
      if @api_client.config.client_side_validation && field_type.nil?
        fail ArgumentError, "Missing the required parameter 'field_type' when calling SearchResultsApi.search_results_field_get"
      end
      # verify the required parameter 'field_key' is set
      if @api_client.config.client_side_validation && field_key.nil?
        fail ArgumentError, "Missing the required parameter 'field_key' when calling SearchResultsApi.search_results_field_get"
      end
      # resource path
      local_var_path = "/searchResults/field"

      # query parameters
      query_params = {}
      query_params[:'term'] = term
      query_params[:'field_type'] = field_type
      query_params[:'field_key'] = field_key
      query_params[:'exact_match'] = opts[:'exact_match'] if !opts[:'exact_match'].nil?
      query_params[:'return_field_key'] = opts[:'return_field_key'] if !opts[:'return_field_key'].nil?
      query_params[:'return_item_ids'] = opts[:'return_item_ids'] if !opts[:'return_item_ids'].nil?
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SearchResultsApi#search_results_field_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Perform a search
    # Performs a search across the account and returns SearchResults.
    # @param term Search term to look for, minimum 2 characters.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :item_type Search for items of exact type. If omitted, all types of items are searched. (default to )
    # @option opts [Float] :start Pagination start (default to 0)
    # @option opts [Float] :limit Items shown per page
    # @option opts [String] :exact_match When enabled, only full exact matches against the given term are returned. The minimum 2 character limit for the term is discarded when exact_match is enabled. It will only work if search term is 30 characters or less. (default to )
    # @return [nil]
    def search_results_get(term, opts = {})
      search_results_get_with_http_info(term, opts)
      return nil
    end

    # Perform a search
    # Performs a search across the account and returns SearchResults.
    # @param term Search term to look for, minimum 2 characters.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :item_type Search for items of exact type. If omitted, all types of items are searched.
    # @option opts [Float] :start Pagination start
    # @option opts [Float] :limit Items shown per page
    # @option opts [String] :exact_match When enabled, only full exact matches against the given term are returned. The minimum 2 character limit for the term is discarded when exact_match is enabled. It will only work if search term is 30 characters or less.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def search_results_get_with_http_info(term, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SearchResultsApi.search_results_get ..."
      end
      # verify the required parameter 'term' is set
      if @api_client.config.client_side_validation && term.nil?
        fail ArgumentError, "Missing the required parameter 'term' when calling SearchResultsApi.search_results_get"
      end
      # resource path
      local_var_path = "/searchResults"

      # query parameters
      query_params = {}
      query_params[:'term'] = term
      query_params[:'item_type'] = opts[:'item_type'] if !opts[:'item_type'].nil?
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'exact_match'] = opts[:'exact_match'] if !opts[:'exact_match'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SearchResultsApi#search_results_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
