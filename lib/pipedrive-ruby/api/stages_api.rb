=begin
#Pipedrive API v1

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module Pipedrive
  class StagesApi
    attr_accessor :api_client

    def initialize(api_client = Client.default)
      @api_client = api_client
    end

    # Delete multiple stages in bulk
    # Marks multiple stages as deleted.
    # @param ids Comma-separated stage IDs to delete
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def stages_delete(ids, opts = {})
      stages_delete_with_http_info(ids, opts)
      end

    # Delete multiple stages in bulk
    # Marks multiple stages as deleted.
    # @param ids Comma-separated stage IDs to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def stages_delete_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StagesApi.stages_delete ..."
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling StagesApi.stages_delete"
      end
      # resource path
      local_var_path = "/stages"

      # query parameters
      query_params = {}
      query_params[:'ids'] = ids

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = [ 'access_token' ]
      response = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StagesApi#stages_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return response
    end

    # Get all stages
    # Returns data about all stages
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :pipeline_id ID of the pipeline to fetch stages for. If omitted, stages for all pipelines will be fetched.
    # @return [nil]
    def stages_get(opts = {})
      stages_get_with_http_info(opts)
      end

    # Get all stages
    # Returns data about all stages
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :pipeline_id ID of the pipeline to fetch stages for. If omitted, stages for all pipelines will be fetched.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def stages_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StagesApi.stages_get ..."
      end
      # resource path
      local_var_path = "/stages"

      # query parameters
      query_params = {}
      query_params[:'pipeline_id'] = opts[:'pipeline_id'] if !opts[:'pipeline_id'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = [ 'access_token' ]
      response = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StagesApi#stages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return response
    end

    # Get deals in a stage
    # Lists deals in a specific stage
    # @param id ID of the stage
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :filter_id If supplied, only deals matching the given filter will be returned.
    # @option opts [Float] :user_id If supplied, filter_id will not be considered and only deals owned by the given user will be returned. If omitted, deals owned by the authorized user will be returned.
    # @option opts [String] :everyone If supplied, filter_id and user_id will not be considered – instead, deals owned by everyone will be returned. (default to )
    # @option opts [Float] :start Pagination start (default to 0)
    # @option opts [Float] :limit Items shown per page
    # @return [nil]
    def stages_id_deals_get(id, opts = {})
      stages_id_deals_get_with_http_info(id, opts)
      end

    # Get deals in a stage
    # Lists deals in a specific stage
    # @param id ID of the stage
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :filter_id If supplied, only deals matching the given filter will be returned.
    # @option opts [Float] :user_id If supplied, filter_id will not be considered and only deals owned by the given user will be returned. If omitted, deals owned by the authorized user will be returned.
    # @option opts [String] :everyone If supplied, filter_id and user_id will not be considered – instead, deals owned by everyone will be returned.
    # @option opts [Float] :start Pagination start
    # @option opts [Float] :limit Items shown per page
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def stages_id_deals_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StagesApi.stages_id_deals_get ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling StagesApi.stages_id_deals_get"
      end
      # resource path
      local_var_path = "/stages/{id}/deals".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'user_id'] = opts[:'user_id'] if !opts[:'user_id'].nil?
      query_params[:'everyone'] = opts[:'everyone'] if !opts[:'everyone'].nil?
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = [ 'access_token' ]
      response = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StagesApi#stages_id_deals_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return response
    end

    # Delete a stage
    # Marks a stage as deleted.
    # @param id ID of the stage to delete
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def stages_id_delete(id, opts = {})
      stages_id_delete_with_http_info(id, opts)
      end

    # Delete a stage
    # Marks a stage as deleted.
    # @param id ID of the stage to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def stages_id_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StagesApi.stages_id_delete ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling StagesApi.stages_id_delete"
      end
      # resource path
      local_var_path = "/stages/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = [ 'access_token' ]
      response = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StagesApi#stages_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return response
    end

    # Get one stage
    # Returns data about a specific stage
    # @param id ID of the stage
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def stages_id_get(id, opts = {})
      stages_id_get_with_http_info(id, opts)
      end

    # Get one stage
    # Returns data about a specific stage
    # @param id ID of the stage
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def stages_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StagesApi.stages_id_get ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling StagesApi.stages_id_get"
      end
      # resource path
      local_var_path = "/stages/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = [ 'access_token' ]
      response = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StagesApi#stages_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return response
    end

    # Update stage details
    # Updates the properties of a stage.
    # @param id ID of the stage
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Name of the stage (default to )
    # @option opts [Float] :pipeline_id ID of the pipeline this stage belongs to.
    # @option opts [Float] :order_nr An order number for this stage. Order numbers should be used to order the stages in the pipeline.
    # @option opts [Float] :deal_probability Deal success probability percentage. Used/shown when deal weighted values are used.
    # @option opts [String] :rotten_flag Whether deals in this stage can become rotten. (default to )
    # @option opts [Float] :rotten_days Number of days the deals not updated in this stage would become rotten. Applies only if rotten_flag is set.
    # @return [nil]
    def stages_id_put(id, opts = {})
      stages_id_put_with_http_info(id, opts)
      end

    # Update stage details
    # Updates the properties of a stage.
    # @param id ID of the stage
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Name of the stage
    # @option opts [Float] :pipeline_id ID of the pipeline this stage belongs to.
    # @option opts [Float] :order_nr An order number for this stage. Order numbers should be used to order the stages in the pipeline.
    # @option opts [Float] :deal_probability Deal success probability percentage. Used/shown when deal weighted values are used.
    # @option opts [String] :rotten_flag Whether deals in this stage can become rotten.
    # @option opts [Float] :rotten_days Number of days the deals not updated in this stage would become rotten. Applies only if rotten_flag is set.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def stages_id_put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StagesApi.stages_id_put ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling StagesApi.stages_id_put"
      end
      # resource path
      local_var_path = "/stages/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}
      form_params["name"] = opts[:'name'] if !opts[:'name'].nil?
      form_params["pipeline_id"] = opts[:'pipeline_id'] if !opts[:'pipeline_id'].nil?
      form_params["order_nr"] = opts[:'order_nr'] if !opts[:'order_nr'].nil?
      form_params["deal_probability"] = opts[:'deal_probability'] if !opts[:'deal_probability'].nil?
      form_params["rotten_flag"] = opts[:'rotten_flag'] if !opts[:'rotten_flag'].nil?
      form_params["rotten_days"] = opts[:'rotten_days'] if !opts[:'rotten_days'].nil?

      # http body (model)
      post_body = nil
      auth_names = [ 'access_token' ]
      response = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StagesApi#stages_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return response
    end

    # Add a new stage
    # Adds a new stage, returns the ID upon success.
    # @param name Name of the stage
    # @param pipeline_id ID of the pipeline to add stage to.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :deal_probability Deal success probability percentage. Used/shown when deal weighted values are used.
    # @option opts [String] :rotten_flag Whether deals in this stage can become rotten. (default to )
    # @option opts [Float] :rotten_days Number of days the deals not updated in this stage would become rotten. Applies only if rotten_flag is set.
    # @return [nil]
    def stages_post(name, pipeline_id, opts = {})
      stages_post_with_http_info(name, pipeline_id, opts)
      end

    # Add a new stage
    # Adds a new stage, returns the ID upon success.
    # @param name Name of the stage
    # @param pipeline_id ID of the pipeline to add stage to.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :deal_probability Deal success probability percentage. Used/shown when deal weighted values are used.
    # @option opts [String] :rotten_flag Whether deals in this stage can become rotten.
    # @option opts [Float] :rotten_days Number of days the deals not updated in this stage would become rotten. Applies only if rotten_flag is set.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def stages_post_with_http_info(name, pipeline_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StagesApi.stages_post ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling StagesApi.stages_post"
      end
      # verify the required parameter 'pipeline_id' is set
      if @api_client.config.client_side_validation && pipeline_id.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline_id' when calling StagesApi.stages_post"
      end
      # resource path
      local_var_path = "/stages"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}
      form_params["name"] = name
      form_params["pipeline_id"] = pipeline_id
      form_params["deal_probability"] = opts[:'deal_probability'] if !opts[:'deal_probability'].nil?
      form_params["rotten_flag"] = opts[:'rotten_flag'] if !opts[:'rotten_flag'].nil?
      form_params["rotten_days"] = opts[:'rotten_days'] if !opts[:'rotten_days'].nil?

      # http body (model)
      post_body = nil
      auth_names = [ 'access_token' ]
      response = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StagesApi#stages_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return response
    end
  end
end
