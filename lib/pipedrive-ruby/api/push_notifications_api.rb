=begin
#Pipedrive API v1

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module Pipedrive
  class PushNotificationsApi
    attr_accessor :api_client

    def initialize(api_client = Client.default)
      @api_client = api_client
    end

    # Get all subscriptions
    # Returns data about all subscriptions. This endpoint is deprecated, use <a href=\"#!/Webhooks/get_webhooks\">Get all webhooks</a> endpoint instead.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def push_notifications_get(opts = {})
      push_notifications_get_with_http_info(opts)
      end

    # Get all subscriptions
    # Returns data about all subscriptions. This endpoint is deprecated, use &lt;a href&#x3D;\&quot;#!/Webhooks/get_webhooks\&quot;&gt;Get all webhooks&lt;/a&gt; endpoint instead.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def push_notifications_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PushNotificationsApi.push_notifications_get ..."
      end
      # resource path
      local_var_path = "/pushNotifications"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = [ 'access_token' ]
      response = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PushNotificationsApi#push_notifications_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return response
    end

    # Delete existing subscription
    # Marks subscription as deleted. This endpoint is deprecated, use <a href=\"#!/Webhooks/delete_webhooks_id\">Delete existing webhook</a> endpoint instead.
    # @param id ID of the subscription to mark as deleted.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def push_notifications_id_delete(id, opts = {})
      push_notifications_id_delete_with_http_info(id, opts)
      end

    # Delete existing subscription
    # Marks subscription as deleted. This endpoint is deprecated, use &lt;a href&#x3D;\&quot;#!/Webhooks/delete_webhooks_id\&quot;&gt;Delete existing webhook&lt;/a&gt; endpoint instead.
    # @param id ID of the subscription to mark as deleted.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def push_notifications_id_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PushNotificationsApi.push_notifications_id_delete ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PushNotificationsApi.push_notifications_id_delete"
      end
      # resource path
      local_var_path = "/pushNotifications/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = [ 'access_token' ]
      response = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PushNotificationsApi#push_notifications_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return response
    end

    # Get details of a subscription
    # Returns data about a specific subscription. This endpoint is deprecated and should not be used anymore.
    # @param id ID of the subscriptions to fetch.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def push_notifications_id_get(id, opts = {})
      push_notifications_id_get_with_http_info(id, opts)
      end

    # Get details of a subscription
    # Returns data about a specific subscription. This endpoint is deprecated and should not be used anymore.
    # @param id ID of the subscriptions to fetch.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def push_notifications_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PushNotificationsApi.push_notifications_id_get ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PushNotificationsApi.push_notifications_id_get"
      end
      # resource path
      local_var_path = "/pushNotifications/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = [ 'access_token' ]
      response = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PushNotificationsApi#push_notifications_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return response
    end

    # Create new subscription
    # Creates new subscription and returns details. This endpoint is deprecated, use <a href=\"#!/Webhooks/post_webhooks\">Create a new webhook</a> endpoint instead.
    # @param subscription_url URL where to send the notifications.
    # @param event What type of notifications to receive (&#39;\\*.\\*&#39; for all events, &#39;added.deal&#39; for any newly added deals, &#39;deleted.persons&#39; for any deleted persons, etc. See https://app.pipedrive.com/push_notifications#dialog:/push_notifications/help for details).
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :user_id ID of the user this push notification will be authorized with. If not set - current authorized user will be used.
    # @option opts [String] :http_auth_user HTTP basic auth username if needed. (default to )
    # @option opts [String] :http_auth_password HTTP basic auth password if needed. (default to )
    # @return [nil]
    def push_notifications_post(subscription_url, event, opts = {})
      push_notifications_post_with_http_info(subscription_url, event, opts)
      end

    # Create new subscription
    # Creates new subscription and returns details. This endpoint is deprecated, use &lt;a href&#x3D;\&quot;#!/Webhooks/post_webhooks\&quot;&gt;Create a new webhook&lt;/a&gt; endpoint instead.
    # @param subscription_url URL where to send the notifications.
    # @param event What type of notifications to receive (&#39;\\*.\\*&#39; for all events, &#39;added.deal&#39; for any newly added deals, &#39;deleted.persons&#39; for any deleted persons, etc. See https://app.pipedrive.com/push_notifications#dialog:/push_notifications/help for details).
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :user_id ID of the user this push notification will be authorized with. If not set - current authorized user will be used.
    # @option opts [String] :http_auth_user HTTP basic auth username if needed.
    # @option opts [String] :http_auth_password HTTP basic auth password if needed.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def push_notifications_post_with_http_info(subscription_url, event, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PushNotificationsApi.push_notifications_post ..."
      end
      # verify the required parameter 'subscription_url' is set
      if @api_client.config.client_side_validation && subscription_url.nil?
        fail ArgumentError, "Missing the required parameter 'subscription_url' when calling PushNotificationsApi.push_notifications_post"
      end
      # verify the required parameter 'event' is set
      if @api_client.config.client_side_validation && event.nil?
        fail ArgumentError, "Missing the required parameter 'event' when calling PushNotificationsApi.push_notifications_post"
      end
      # resource path
      local_var_path = "/pushNotifications"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}
      form_params["subscription_url"] = subscription_url
      form_params["event"] = event
      form_params["user_id"] = opts[:'user_id'] if !opts[:'user_id'].nil?
      form_params["http_auth_user"] = opts[:'http_auth_user'] if !opts[:'http_auth_user'].nil?
      form_params["http_auth_password"] = opts[:'http_auth_password'] if !opts[:'http_auth_password'].nil?

      # http body (model)
      post_body = nil
      auth_names = [ 'access_token' ]
      response = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PushNotificationsApi#push_notifications_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return response
    end
  end
end
