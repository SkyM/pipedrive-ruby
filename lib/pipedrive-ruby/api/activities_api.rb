=begin
#Pipedrive API v1

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module Pipedrive
  class ActivitiesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Delete multiple activities in bulk
    # Marks multiple activities as deleted.
    # @param ids Comma-separated IDs that will be deleted
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def activities_delete(ids, opts = {})
      activities_delete_with_http_info(ids, opts)
      return nil
    end

    # Delete multiple activities in bulk
    # Marks multiple activities as deleted.
    # @param ids Comma-separated IDs that will be deleted
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def activities_delete_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ActivitiesApi.activities_delete ..."
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling ActivitiesApi.activities_delete"
      end
      # resource path
      local_var_path = "/activities"

      # query parameters
      query_params = {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :csv)

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActivitiesApi#activities_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all activities assigned to a particular user
    # Returns all activities assigned to a particular user
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :user_id ID of the user who&#39;s activities to fetch. If omitted, the authorized user will be used. If 0, activities for all users in company will be fetched.
    # @option opts [Float] :filter_id ID of the filter to use (will narrow down results if used together with user_id parameter).
    # @option opts [String] :type Type of the activity. This is in correlation with the key_string parameter of ActivityTypes. (default to )
    # @option opts [Float] :start Pagination start (default to 0)
    # @option opts [Float] :limit Items shown per page
    # @option opts [String] :start_date Date in format of YYYY-MM-DD from which activities to fetch from. (default to )
    # @option opts [String] :end_date Date in format of YYYY-MM-DD until which activities to fetch to. (default to )
    # @option opts [String] :done Whether the activity is done or not. 0 &#x3D; Not done, 1 &#x3D; Done. If omitted returns both Done and Not done
    # @return [nil]
    def activities_get(opts = {})
      activities_get_with_http_info(opts)
      return nil
    end

    # Get all activities assigned to a particular user
    # Returns all activities assigned to a particular user
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :user_id ID of the user who&#39;s activities to fetch. If omitted, the authorized user will be used. If 0, activities for all users in company will be fetched.
    # @option opts [Float] :filter_id ID of the filter to use (will narrow down results if used together with user_id parameter).
    # @option opts [String] :type Type of the activity. This is in correlation with the key_string parameter of ActivityTypes.
    # @option opts [Float] :start Pagination start
    # @option opts [Float] :limit Items shown per page
    # @option opts [String] :start_date Date in format of YYYY-MM-DD from which activities to fetch from.
    # @option opts [String] :end_date Date in format of YYYY-MM-DD until which activities to fetch to.
    # @option opts [String] :done Whether the activity is done or not. 0 &#x3D; Not done, 1 &#x3D; Done. If omitted returns both Done and Not done
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def activities_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ActivitiesApi.activities_get ..."
      end
      # resource path
      local_var_path = "/activities"

      # query parameters
      query_params = {}
      query_params[:'user_id'] = opts[:'user_id'] if !opts[:'user_id'].nil?
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'start_date'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'end_date'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'done'] = opts[:'done'] if !opts[:'done'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActivitiesApi#activities_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an activity
    # Deletes an activity
    # @param id ID of the activity
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def activities_id_delete(id, opts = {})
      activities_id_delete_with_http_info(id, opts)
      return nil
    end

    # Delete an activity
    # Deletes an activity
    # @param id ID of the activity
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def activities_id_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ActivitiesApi.activities_id_delete ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ActivitiesApi.activities_id_delete"
      end
      # resource path
      local_var_path = "/activities/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActivitiesApi#activities_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get details of an activity
    # Returns details of a specific activity.
    # @param id ID of the activity
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def activities_id_get(id, opts = {})
      activities_id_get_with_http_info(id, opts)
      return nil
    end

    # Get details of an activity
    # Returns details of a specific activity.
    # @param id ID of the activity
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def activities_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ActivitiesApi.activities_id_get ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ActivitiesApi.activities_id_get"
      end
      # resource path
      local_var_path = "/activities/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActivitiesApi#activities_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Edit an activity
    # Modifies an activity. Includes more_activities_scheduled_in_context property in response's additional_data which indicates whether there are more undone activities scheduled with the same deal, person or organization (depending on the supplied data).
    # @param id ID of the activity
    # @param [Hash] opts the optional parameters
    # @option opts [String] :subject Subject of the activity. When omitted, will remain unchanged. (default to )
    # @option opts [String] :done Whether the activity is done or not. 0 &#x3D; Not done, 1 &#x3D; Done (default to 0)
    # @option opts [String] :type Type of the activity. This is in correlation with the key_string parameter of ActivityTypes. (default to )
    # @option opts [String] :due_date Due date of the activity. Format: YYYY-MM-DD (default to )
    # @option opts [String] :due_time Due time of the activity in UTC. Format: HH:MM (default to )
    # @option opts [String] :duration Duration of the activity. Format: HH:MM (default to )
    # @option opts [Float] :user_id ID of the user whom the activity will be assigned to
    # @option opts [Float] :deal_id ID of the deal this activity will be associated with
    # @option opts [Float] :person_id ID of the person this activity will be associated with
    # @option opts [] :participants List of multiple persons (participants) this activity will be associated with. If omitted, single participant from person_id field is used. It requires a structure as follows: [{\&quot;person_id\&quot;:1,\&quot;primary_flag\&quot;:true}]
    # @option opts [Float] :org_id ID of the organization this activity will be associated with
    # @option opts [String] :note Note of the activity (HTML format). When omitted, will remain unchanged. (default to )
    # @return [nil]
    def activities_id_put(id, opts = {})
      activities_id_put_with_http_info(id, opts)
      return nil
    end

    # Edit an activity
    # Modifies an activity. Includes more_activities_scheduled_in_context property in response&#39;s additional_data which indicates whether there are more undone activities scheduled with the same deal, person or organization (depending on the supplied data).
    # @param id ID of the activity
    # @param [Hash] opts the optional parameters
    # @option opts [String] :subject Subject of the activity. When omitted, will remain unchanged.
    # @option opts [String] :done Whether the activity is done or not. 0 &#x3D; Not done, 1 &#x3D; Done
    # @option opts [String] :type Type of the activity. This is in correlation with the key_string parameter of ActivityTypes.
    # @option opts [String] :due_date Due date of the activity. Format: YYYY-MM-DD
    # @option opts [String] :due_time Due time of the activity in UTC. Format: HH:MM
    # @option opts [String] :duration Duration of the activity. Format: HH:MM
    # @option opts [Float] :user_id ID of the user whom the activity will be assigned to
    # @option opts [Float] :deal_id ID of the deal this activity will be associated with
    # @option opts [Float] :person_id ID of the person this activity will be associated with
    # @option opts [] :participants List of multiple persons (participants) this activity will be associated with. If omitted, single participant from person_id field is used. It requires a structure as follows: [{\&quot;person_id\&quot;:1,\&quot;primary_flag\&quot;:true}]
    # @option opts [Float] :org_id ID of the organization this activity will be associated with
    # @option opts [String] :note Note of the activity (HTML format). When omitted, will remain unchanged.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def activities_id_put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ActivitiesApi.activities_id_put ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ActivitiesApi.activities_id_put"
      end
      # resource path
      local_var_path = "/activities/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}
      form_params["subject"] = opts[:'subject'] if !opts[:'subject'].nil?
      form_params["done"] = opts[:'done'] if !opts[:'done'].nil?
      form_params["type"] = opts[:'type'] if !opts[:'type'].nil?
      form_params["due_date"] = opts[:'due_date'] if !opts[:'due_date'].nil?
      form_params["due_time"] = opts[:'due_time'] if !opts[:'due_time'].nil?
      form_params["duration"] = opts[:'duration'] if !opts[:'duration'].nil?
      form_params["user_id"] = opts[:'user_id'] if !opts[:'user_id'].nil?
      form_params["deal_id"] = opts[:'deal_id'] if !opts[:'deal_id'].nil?
      form_params["person_id"] = opts[:'person_id'] if !opts[:'person_id'].nil?
      form_params["org_id"] = opts[:'org_id'] if !opts[:'org_id'].nil?
      form_params["note"] = opts[:'note'] if !opts[:'note'].nil?

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'participants'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActivitiesApi#activities_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add an activity
    # Adds a new activity. Includes more_activities_scheduled_in_context property in response's additional_data which indicates whether there are more undone activities scheduled with the same deal, person or organization (depending on the supplied data).
    # @param subject Subject of the activity
    # @param type Type of the activity. This is in correlation with the key_string parameter of ActivityTypes.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :done Whether the activity is done or not. 0 &#x3D; Not done, 1 &#x3D; Done (default to 0)
    # @option opts [String] :due_date Due date of the activity. Format: YYYY-MM-DD (default to )
    # @option opts [String] :due_time Due time of the activity in UTC. Format: HH:MM (default to )
    # @option opts [String] :duration Duration of the activity. Format: HH:MM (default to )
    # @option opts [Float] :user_id ID of the user whom the activity will be assigned to. If omitted, the activity will be assigned to the authorized user.
    # @option opts [Float] :deal_id ID of the deal this activity will be associated with
    # @option opts [Float] :person_id ID of the person this activity will be associated with
    # @option opts [] :participants List of multiple persons (participants) this activity will be associated with. If omitted, single participant from person_id field is used. It requires a structure as follows: [{\&quot;person_id\&quot;:1,\&quot;primary_flag\&quot;:true}]
    # @option opts [Float] :org_id ID of the organization this activity will be associated with
    # @option opts [String] :note Note of the activity (HTML format) (default to )
    # @return [nil]
    def activities_post(subject, type, opts = {})
      activities_post_with_http_info(subject, type, opts)
      return nil
    end

    # Add an activity
    # Adds a new activity. Includes more_activities_scheduled_in_context property in response&#39;s additional_data which indicates whether there are more undone activities scheduled with the same deal, person or organization (depending on the supplied data).
    # @param subject Subject of the activity
    # @param type Type of the activity. This is in correlation with the key_string parameter of ActivityTypes.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :done Whether the activity is done or not. 0 &#x3D; Not done, 1 &#x3D; Done
    # @option opts [String] :due_date Due date of the activity. Format: YYYY-MM-DD
    # @option opts [String] :due_time Due time of the activity in UTC. Format: HH:MM
    # @option opts [String] :duration Duration of the activity. Format: HH:MM
    # @option opts [Float] :user_id ID of the user whom the activity will be assigned to. If omitted, the activity will be assigned to the authorized user.
    # @option opts [Float] :deal_id ID of the deal this activity will be associated with
    # @option opts [Float] :person_id ID of the person this activity will be associated with
    # @option opts [] :participants List of multiple persons (participants) this activity will be associated with. If omitted, single participant from person_id field is used. It requires a structure as follows: [{\&quot;person_id\&quot;:1,\&quot;primary_flag\&quot;:true}]
    # @option opts [Float] :org_id ID of the organization this activity will be associated with
    # @option opts [String] :note Note of the activity (HTML format)
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def activities_post_with_http_info(subject, type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ActivitiesApi.activities_post ..."
      end
      # verify the required parameter 'subject' is set
      if @api_client.config.client_side_validation && subject.nil?
        fail ArgumentError, "Missing the required parameter 'subject' when calling ActivitiesApi.activities_post"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling ActivitiesApi.activities_post"
      end
      # resource path
      local_var_path = "/activities"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}
      form_params["subject"] = subject
      form_params["type"] = type
      form_params["done"] = opts[:'done'] if !opts[:'done'].nil?
      form_params["due_date"] = opts[:'due_date'] if !opts[:'due_date'].nil?
      form_params["due_time"] = opts[:'due_time'] if !opts[:'due_time'].nil?
      form_params["duration"] = opts[:'duration'] if !opts[:'duration'].nil?
      form_params["user_id"] = opts[:'user_id'] if !opts[:'user_id'].nil?
      form_params["deal_id"] = opts[:'deal_id'] if !opts[:'deal_id'].nil?
      form_params["person_id"] = opts[:'person_id'] if !opts[:'person_id'].nil?
      form_params["org_id"] = opts[:'org_id'] if !opts[:'org_id'].nil?
      form_params["note"] = opts[:'note'] if !opts[:'note'].nil?

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'participants'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActivitiesApi#activities_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
