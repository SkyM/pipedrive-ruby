=begin
#Pipedrive API v1

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module Pipedrive
  class OrganizationsApi
    attr_accessor :api_client

    def initialize(api_client = Client.default)
      @api_client = api_client
    end

    # Delete multiple organizations in bulk
    # Marks multiple organizations as deleted.
    # @param ids Comma-separated IDs that will be deleted
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def organizations_delete(ids, opts = {})
      organizations_delete_with_http_info(ids, opts)
      
    end

    # Delete multiple organizations in bulk
    # Marks multiple organizations as deleted.
    # @param ids Comma-separated IDs that will be deleted
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def organizations_delete_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: OrganizationsApi.organizations_delete ..."
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling OrganizationsApi.organizations_delete"
      end
      # resource path
      local_var_path = "/organizations"

      # query parameters
      query_params = {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :csv)

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = [ 'access_token' ]
      response = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#organizations_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return response
    end

    # Find organizations by name
    # Searches all organizations by their name.
    # @param term Search term to look for
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :start Pagination start (default to 0)
    # @option opts [Float] :limit Items shown per page
    # @return [nil]
    def organizations_find_get(term, opts = {})
      organizations_find_get_with_http_info(term, opts)
      
    end

    # Find organizations by name
    # Searches all organizations by their name.
    # @param term Search term to look for
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :start Pagination start
    # @option opts [Float] :limit Items shown per page
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def organizations_find_get_with_http_info(term, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: OrganizationsApi.organizations_find_get ..."
      end
      # verify the required parameter 'term' is set
      if @api_client.config.client_side_validation && term.nil?
        fail ArgumentError, "Missing the required parameter 'term' when calling OrganizationsApi.organizations_find_get"
      end
      # resource path
      local_var_path = "/organizations/find"

      # query parameters
      query_params = {}
      query_params[:'term'] = term
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = [ 'access_token' ]
      response = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#organizations_find_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return response
    end

    # Get all organizations
    # Returns all organizations
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :user_id If supplied, only organizations owned by the given user will be returned.
    # @option opts [Float] :filter_id ID of the filter to use
    # @option opts [String] :first_char If supplied, only organizations whose name starts with the specified letter will be returned (case insensitive). (default to )
    # @option opts [Float] :start Pagination start (default to 0)
    # @option opts [Float] :limit Items shown per page
    # @option opts [String] :sort Field names and sorting mode separated by comma (field_name_1 ASC, field_name_2 DESC). Only first-level field keys are supported (no nested keys). (default to )
    # @return [nil]
    def organizations_get(opts = {})
      organizations_get_with_http_info(opts)
      
    end

    # Get all organizations
    # Returns all organizations
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :user_id If supplied, only organizations owned by the given user will be returned.
    # @option opts [Float] :filter_id ID of the filter to use
    # @option opts [String] :first_char If supplied, only organizations whose name starts with the specified letter will be returned (case insensitive).
    # @option opts [Float] :start Pagination start
    # @option opts [Float] :limit Items shown per page
    # @option opts [String] :sort Field names and sorting mode separated by comma (field_name_1 ASC, field_name_2 DESC). Only first-level field keys are supported (no nested keys).
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def organizations_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: OrganizationsApi.organizations_get ..."
      end
      # resource path
      local_var_path = "/organizations"

      # query parameters
      query_params = {}
      query_params[:'user_id'] = opts[:'user_id'] if !opts[:'user_id'].nil?
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'first_char'] = opts[:'first_char'] if !opts[:'first_char'].nil?
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = [ 'access_token' ]
      response = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#organizations_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return response
    end

    # List activities associated with an organization
    # Lists activities associated with an organization.
    # @param id ID of the organization
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :start Pagination start (default to 0)
    # @option opts [Float] :limit Items shown per page
    # @option opts [String] :done Whether to fetch done (1) or undone (0) activities. If omitted from request, both undone and done activities are fetched. (default to )
    # @option opts [String] :exclude A comma-separated string of activity IDs to exclude from result (default to )
    # @return [nil]
    def organizations_id_activities_get(id, opts = {})
      organizations_id_activities_get_with_http_info(id, opts)
      
    end

    # List activities associated with an organization
    # Lists activities associated with an organization.
    # @param id ID of the organization
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :start Pagination start
    # @option opts [Float] :limit Items shown per page
    # @option opts [String] :done Whether to fetch done (1) or undone (0) activities. If omitted from request, both undone and done activities are fetched.
    # @option opts [String] :exclude A comma-separated string of activity IDs to exclude from result
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def organizations_id_activities_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: OrganizationsApi.organizations_id_activities_get ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling OrganizationsApi.organizations_id_activities_get"
      end
      # resource path
      local_var_path = "/organizations/{id}/activities".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'done'] = opts[:'done'] if !opts[:'done'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = [ 'access_token' ]
      response = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#organizations_id_activities_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return response
    end

    # List deals associated with an organization
    # Lists deals associated with an organization.
    # @param id ID of an organization
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :start Pagination start (default to 0)
    # @option opts [Float] :limit Items shown per page
    # @option opts [String] :status Only fetch deals with specific status. If omitted, all not deleted deals are fetched. (default to all_not_deleted)
    # @option opts [String] :sort Field names and sorting mode separated by comma (field_name_1 ASC, field_name_2 DESC). Only first-level field keys are supported (no nested keys). (default to )
    # @option opts [String] :only_primary_association If set, only deals that are directly associated to the organization are fetched. If not set (default), all deals are fetched that are either directly or indirectly related to the organization. Indirect relations include relations through custom, organization-type fields and through persons of the given organization. (default to )
    # @return [nil]
    def organizations_id_deals_get(id, opts = {})
      organizations_id_deals_get_with_http_info(id, opts)
      
    end

    # List deals associated with an organization
    # Lists deals associated with an organization.
    # @param id ID of an organization
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :start Pagination start
    # @option opts [Float] :limit Items shown per page
    # @option opts [String] :status Only fetch deals with specific status. If omitted, all not deleted deals are fetched.
    # @option opts [String] :sort Field names and sorting mode separated by comma (field_name_1 ASC, field_name_2 DESC). Only first-level field keys are supported (no nested keys).
    # @option opts [String] :only_primary_association If set, only deals that are directly associated to the organization are fetched. If not set (default), all deals are fetched that are either directly or indirectly related to the organization. Indirect relations include relations through custom, organization-type fields and through persons of the given organization.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def organizations_id_deals_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: OrganizationsApi.organizations_id_deals_get ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling OrganizationsApi.organizations_id_deals_get"
      end
      # resource path
      local_var_path = "/organizations/{id}/deals".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'only_primary_association'] = opts[:'only_primary_association'] if !opts[:'only_primary_association'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = [ 'access_token' ]
      response = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#organizations_id_deals_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return response
    end

    # Delete an organization
    # Marks an organization as deleted.
    # @param id ID of the organization
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def organizations_id_delete(id, opts = {})
      organizations_id_delete_with_http_info(id, opts)
      
    end

    # Delete an organization
    # Marks an organization as deleted.
    # @param id ID of the organization
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def organizations_id_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: OrganizationsApi.organizations_id_delete ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling OrganizationsApi.organizations_id_delete"
      end
      # resource path
      local_var_path = "/organizations/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = [ 'access_token' ]
      response = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#organizations_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return response
    end

    # List files attached to an organization
    # Lists files associated with an organization.
    # @param id ID of the organization
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :start Pagination start (default to 0)
    # @option opts [Float] :limit Items shown per page
    # @option opts [String] :include_deleted_files When enabled, the list of files will also include deleted files. Please note that trying to download these files will not work. (default to )
    # @option opts [String] :sort Field names and sorting mode separated by comma (field_name_1 ASC, field_name_2 DESC). Only first-level field keys are supported (no nested keys). Supported fields: id, user_id, deal_id, person_id, org_id, product_id, add_time, update_time, file_name, file_type, file_size, comment. (default to )
    # @return [nil]
    def organizations_id_files_get(id, opts = {})
      organizations_id_files_get_with_http_info(id, opts)
      
    end

    # List files attached to an organization
    # Lists files associated with an organization.
    # @param id ID of the organization
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :start Pagination start
    # @option opts [Float] :limit Items shown per page
    # @option opts [String] :include_deleted_files When enabled, the list of files will also include deleted files. Please note that trying to download these files will not work.
    # @option opts [String] :sort Field names and sorting mode separated by comma (field_name_1 ASC, field_name_2 DESC). Only first-level field keys are supported (no nested keys). Supported fields: id, user_id, deal_id, person_id, org_id, product_id, add_time, update_time, file_name, file_type, file_size, comment.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def organizations_id_files_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: OrganizationsApi.organizations_id_files_get ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling OrganizationsApi.organizations_id_files_get"
      end
      # resource path
      local_var_path = "/organizations/{id}/files".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'include_deleted_files'] = opts[:'include_deleted_files'] if !opts[:'include_deleted_files'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = [ 'access_token' ]
      response = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#organizations_id_files_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return response
    end

    # List updates about an organization
    # Lists updates about an organization.
    # @param id ID of the organization
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :start Pagination start (default to 0)
    # @option opts [Float] :limit Items shown per page
    # @return [nil]
    def organizations_id_flow_get(id, opts = {})
      organizations_id_flow_get_with_http_info(id, opts)
    end

    # List updates about an organization
    # Lists updates about an organization.
    # @param id ID of the organization
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :start Pagination start
    # @option opts [Float] :limit Items shown per page
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def organizations_id_flow_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: OrganizationsApi.organizations_id_flow_get ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling OrganizationsApi.organizations_id_flow_get"
      end
      # resource path
      local_var_path = "/organizations/{id}/flow".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = [ 'access_token' ]
      response = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#organizations_id_flow_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return response
    end

    # Delete a follower from an organization
    # Deletes a follower from an organization.
    # @param id ID of the organization
    # @param follower_id ID of the follower
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def organizations_id_followers_follower_id_delete(id, follower_id, opts = {})
      organizations_id_followers_follower_id_delete_with_http_info(id, follower_id, opts)
      
    end

    # Delete a follower from an organization
    # Deletes a follower from an organization.
    # @param id ID of the organization
    # @param follower_id ID of the follower
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def organizations_id_followers_follower_id_delete_with_http_info(id, follower_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: OrganizationsApi.organizations_id_followers_follower_id_delete ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling OrganizationsApi.organizations_id_followers_follower_id_delete"
      end
      # verify the required parameter 'follower_id' is set
      if @api_client.config.client_side_validation && follower_id.nil?
        fail ArgumentError, "Missing the required parameter 'follower_id' when calling OrganizationsApi.organizations_id_followers_follower_id_delete"
      end
      # resource path
      local_var_path = "/organizations/{id}/followers/{follower_id}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'follower_id' + '}', follower_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = [ 'access_token' ]
      response = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#organizations_id_followers_follower_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return response
    end

    # List followers of an organization
    # Lists the followers of an organization.
    # @param id ID of the organization
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def organizations_id_followers_get(id, opts = {})
      organizations_id_followers_get_with_http_info(id, opts)
      
    end

    # List followers of an organization
    # Lists the followers of an organization.
    # @param id ID of the organization
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def organizations_id_followers_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: OrganizationsApi.organizations_id_followers_get ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling OrganizationsApi.organizations_id_followers_get"
      end
      # resource path
      local_var_path = "/organizations/{id}/followers".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = [ 'access_token' ]
      response = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#organizations_id_followers_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return response
    end

    # Add a follower to an organization
    # Adds a follower to an organization.
    # @param id ID of the organization
    # @param user_id ID of the user
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def organizations_id_followers_post(id, user_id, opts = {})
      organizations_id_followers_post_with_http_info(id, user_id, opts)
      
    end

    # Add a follower to an organization
    # Adds a follower to an organization.
    # @param id ID of the organization
    # @param user_id ID of the user
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def organizations_id_followers_post_with_http_info(id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: OrganizationsApi.organizations_id_followers_post ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling OrganizationsApi.organizations_id_followers_post"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling OrganizationsApi.organizations_id_followers_post"
      end
      # resource path
      local_var_path = "/organizations/{id}/followers".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}
      form_params["user_id"] = user_id

      # http body (model)
      post_body = nil
      auth_names = [ 'access_token' ]
      response = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#organizations_id_followers_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return response
    end

    # Get details of an organization
    # Returns details of an organization. Note that this also returns some additional fields which are not present when asking for all organizations. Also note that custom fields appear as long hashes in the resulting data. These hashes can be mapped against the 'key' value of organizationFields.
    # @param id ID of the organization
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def organizations_id_get(id, opts = {})
      organizations_id_get_with_http_info(id, opts)
      
    end

    # Get details of an organization
    # Returns details of an organization. Note that this also returns some additional fields which are not present when asking for all organizations. Also note that custom fields appear as long hashes in the resulting data. These hashes can be mapped against the &#39;key&#39; value of organizationFields.
    # @param id ID of the organization
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def organizations_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: OrganizationsApi.organizations_id_get ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling OrganizationsApi.organizations_id_get"
      end
      # resource path
      local_var_path = "/organizations/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = [ 'access_token' ]
      response = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#organizations_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return response
    end

    # List mail messages associated with an organization
    # Lists mail messages associated with an organization.
    # @param id ID of the organization
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :start Pagination start (default to 0)
    # @option opts [Float] :limit Items shown per page
    # @return [nil]
    def organizations_id_mail_messages_get(id, opts = {})
      organizations_id_mail_messages_get_with_http_info(id, opts)
      
    end

    # List mail messages associated with an organization
    # Lists mail messages associated with an organization.
    # @param id ID of the organization
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :start Pagination start
    # @option opts [Float] :limit Items shown per page
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def organizations_id_mail_messages_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: OrganizationsApi.organizations_id_mail_messages_get ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling OrganizationsApi.organizations_id_mail_messages_get"
      end
      # resource path
      local_var_path = "/organizations/{id}/mailMessages".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = [ 'access_token' ]
      response = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#organizations_id_mail_messages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return response
    end

    # Merge two organizations
    # Merges an organization with another organization.
    # @param id ID of the organization that will be merged
    # @param merge_with_id ID of the organization that the organization will be merged with
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def organizations_id_merge_put(id, merge_with_id, opts = {})
      organizations_id_merge_put_with_http_info(id, merge_with_id, opts)
      
    end

    # Merge two organizations
    # Merges an organization with another organization.
    # @param id ID of the organization that will be merged
    # @param merge_with_id ID of the organization that the organization will be merged with
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def organizations_id_merge_put_with_http_info(id, merge_with_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: OrganizationsApi.organizations_id_merge_put ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling OrganizationsApi.organizations_id_merge_put"
      end
      # verify the required parameter 'merge_with_id' is set
      if @api_client.config.client_side_validation && merge_with_id.nil?
        fail ArgumentError, "Missing the required parameter 'merge_with_id' when calling OrganizationsApi.organizations_id_merge_put"
      end
      # resource path
      local_var_path = "/organizations/{id}/merge".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}
      form_params["merge_with_id"] = merge_with_id

      # http body (model)
      post_body = nil
      auth_names = [ 'access_token' ]
      response = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#organizations_id_merge_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return response
    end

    # List permitted users
    # List users permitted to access an organization
    # @param id ID of the organization
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_level If set, filter results by allowed access level. 1 &#x3D; Read, 2 &#x3D; Write, 3 &#x3D; Read+Write (default to )
    # @return [nil]
    def organizations_id_permitted_users_get(id, opts = {})
      organizations_id_permitted_users_get_with_http_info(id, opts)
      
    end

    # List permitted users
    # List users permitted to access an organization
    # @param id ID of the organization
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_level If set, filter results by allowed access level. 1 &#x3D; Read, 2 &#x3D; Write, 3 &#x3D; Read+Write
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def organizations_id_permitted_users_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: OrganizationsApi.organizations_id_permitted_users_get ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling OrganizationsApi.organizations_id_permitted_users_get"
      end
      # resource path
      local_var_path = "/organizations/{id}/permittedUsers".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'access_level'] = opts[:'access_level'] if !opts[:'access_level'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = [ 'access_token' ]
      response = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#organizations_id_permitted_users_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return response
    end

    # List persons of an organization
    # Lists persons associated with an organization.
    # @param id ID of the organization
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :start Pagination start (default to 0)
    # @option opts [Float] :limit Items shown per page
    # @return [nil]
    def organizations_id_persons_get(id, opts = {})
      organizations_id_persons_get_with_http_info(id, opts)
      
    end

    # List persons of an organization
    # Lists persons associated with an organization.
    # @param id ID of the organization
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :start Pagination start
    # @option opts [Float] :limit Items shown per page
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def organizations_id_persons_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: OrganizationsApi.organizations_id_persons_get ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling OrganizationsApi.organizations_id_persons_get"
      end
      # resource path
      local_var_path = "/organizations/{id}/persons".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = [ 'access_token' ]
      response = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#organizations_id_persons_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return response
    end

    # Update an organization
    # Updates the properties of an organization.
    # @param id Organization ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Organization name (default to )
    # @option opts [Float] :owner_id ID of the user who will be marked as the owner of this organization. When omitted, the authorized user ID will be used.
    # @option opts [String] :visible_to Visibility of the organization. If omitted, visibility will not be changed.&lt;dl class&#x3D;\&quot;fields-list\&quot;&gt;&lt;dt&gt;1&lt;/dt&gt;&lt;dd&gt;Owner &amp;amp; followers (private)&lt;/dd&gt;&lt;dt&gt;3&lt;/dt&gt;&lt;dd&gt;Entire company (shared)&lt;/dd&gt;&lt;/dl&gt; (default to )
    # @return [nil]
    def organizations_id_put(id, opts = {})
      organizations_id_put_with_http_info(id, opts)
      
    end

    # Update an organization
    # Updates the properties of an organization.
    # @param id Organization ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Organization name
    # @option opts [Float] :owner_id ID of the user who will be marked as the owner of this organization. When omitted, the authorized user ID will be used.
    # @option opts [String] :visible_to Visibility of the organization. If omitted, visibility will not be changed.&lt;dl class&#x3D;\&quot;fields-list\&quot;&gt;&lt;dt&gt;1&lt;/dt&gt;&lt;dd&gt;Owner &amp;amp; followers (private)&lt;/dd&gt;&lt;dt&gt;3&lt;/dt&gt;&lt;dd&gt;Entire company (shared)&lt;/dd&gt;&lt;/dl&gt;
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def organizations_id_put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: OrganizationsApi.organizations_id_put ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling OrganizationsApi.organizations_id_put"
      end
      # resource path
      local_var_path = "/organizations/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}
      form_params["name"] = opts[:'name'] if !opts[:'name'].nil?
      form_params["owner_id"] = opts[:'owner_id'] if !opts[:'owner_id'].nil?
      form_params["visible_to"] = opts[:'visible_to'] if !opts[:'visible_to'].nil?

      # http body (model)
      post_body = nil
      auth_names = [ 'access_token' ]
      response = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#organizations_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return response
    end

    # Add an organization
    # Adds a new organization. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys. To determine which custom fields exists, fetch the organizationFields and look for 'key' values.
    # @param name Organization name
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :owner_id ID of the user who will be marked as the owner of this organization. When omitted, the authorized user ID will be used.
    # @option opts [String] :visible_to Visibility of the organization. If omitted, visibility will be set to the default visibility setting of this item type for the authorized user.&lt;dl class&#x3D;\&quot;fields-list\&quot;&gt;&lt;dt&gt;1&lt;/dt&gt;&lt;dd&gt;Owner &amp;amp; followers (private)&lt;/dd&gt;&lt;dt&gt;3&lt;/dt&gt;&lt;dd&gt;Entire company (shared)&lt;/dd&gt;&lt;/dl&gt; (default to )
    # @option opts [String] :add_time Optional creation date &amp; time of the organization in UTC. Requires admin user API token. Format: YYYY-MM-DD HH:MM:SS (default to )
    # @return [nil]
    def organizations_post(name, opts = {})
      organizations_post_with_http_info(name, opts)
      
    end

    # Add an organization
    # Adds a new organization. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys. To determine which custom fields exists, fetch the organizationFields and look for &#39;key&#39; values.
    # @param name Organization name
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :owner_id ID of the user who will be marked as the owner of this organization. When omitted, the authorized user ID will be used.
    # @option opts [String] :visible_to Visibility of the organization. If omitted, visibility will be set to the default visibility setting of this item type for the authorized user.&lt;dl class&#x3D;\&quot;fields-list\&quot;&gt;&lt;dt&gt;1&lt;/dt&gt;&lt;dd&gt;Owner &amp;amp; followers (private)&lt;/dd&gt;&lt;dt&gt;3&lt;/dt&gt;&lt;dd&gt;Entire company (shared)&lt;/dd&gt;&lt;/dl&gt;
    # @option opts [String] :add_time Optional creation date &amp; time of the organization in UTC. Requires admin user API token. Format: YYYY-MM-DD HH:MM:SS
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def organizations_post_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: OrganizationsApi.organizations_post ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling OrganizationsApi.organizations_post"
      end
      # resource path
      local_var_path = "/organizations"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}
      form_params["name"] = name
      form_params["owner_id"] = opts[:'owner_id'] if !opts[:'owner_id'].nil?
      form_params["visible_to"] = opts[:'visible_to'] if !opts[:'visible_to'].nil?
      form_params["add_time"] = opts[:'add_time'] if !opts[:'add_time'].nil?

      # http body (model)
      post_body = nil
      auth_names = [ 'access_token' ]
      response = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#organizations_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return response
    end
  end
end
